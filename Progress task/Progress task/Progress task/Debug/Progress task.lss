
Progress task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800200  000020a8  0000213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000160  00800250  00800250  0000218c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b92  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbf  00000000  00000000  00006016  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f25  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  00008efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b63  00000000  00000000  00009680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024aa  00000000  00000000  0000a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000c68d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
       2:	00 00       	nop
       4:	a9 c0       	rjmp	.+338    	; 0x158 <__bad_interrupt>
       6:	00 00       	nop
       8:	a7 c0       	rjmp	.+334    	; 0x158 <__bad_interrupt>
       a:	00 00       	nop
       c:	a5 c0       	rjmp	.+330    	; 0x158 <__bad_interrupt>
       e:	00 00       	nop
      10:	a3 c0       	rjmp	.+326    	; 0x158 <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c3       	rjmp	.+1960   	; 0x7be <__vector_5>
      16:	00 00       	nop
      18:	ad c3       	rjmp	.+1882   	; 0x774 <__vector_6>
      1a:	00 00       	nop
      1c:	9d c0       	rjmp	.+314    	; 0x158 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_8>
      24:	99 c0       	rjmp	.+306    	; 0x158 <__bad_interrupt>
      26:	00 00       	nop
      28:	97 c0       	rjmp	.+302    	; 0x158 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	95 c0       	rjmp	.+298    	; 0x158 <__bad_interrupt>
      2e:	00 00       	nop
      30:	93 c0       	rjmp	.+294    	; 0x158 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c0       	rjmp	.+290    	; 0x158 <__bad_interrupt>
      36:	00 00       	nop
      38:	8f c0       	rjmp	.+286    	; 0x158 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8d c0       	rjmp	.+282    	; 0x158 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8b c0       	rjmp	.+278    	; 0x158 <__bad_interrupt>
      42:	00 00       	nop
      44:	89 c0       	rjmp	.+274    	; 0x158 <__bad_interrupt>
      46:	00 00       	nop
      48:	87 c0       	rjmp	.+270    	; 0x158 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	85 c0       	rjmp	.+266    	; 0x158 <__bad_interrupt>
      4e:	00 00       	nop
      50:	83 c0       	rjmp	.+262    	; 0x158 <__bad_interrupt>
      52:	00 00       	nop
      54:	81 c0       	rjmp	.+258    	; 0x158 <__bad_interrupt>
      56:	00 00       	nop
      58:	7f c0       	rjmp	.+254    	; 0x158 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7d c0       	rjmp	.+250    	; 0x158 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7b c0       	rjmp	.+246    	; 0x158 <__bad_interrupt>
      62:	00 00       	nop
      64:	79 c0       	rjmp	.+242    	; 0x158 <__bad_interrupt>
      66:	00 00       	nop
      68:	77 c0       	rjmp	.+238    	; 0x158 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	75 c0       	rjmp	.+234    	; 0x158 <__bad_interrupt>
      6e:	00 00       	nop
      70:	73 c0       	rjmp	.+230    	; 0x158 <__bad_interrupt>
      72:	00 00       	nop
      74:	71 c0       	rjmp	.+226    	; 0x158 <__bad_interrupt>
      76:	00 00       	nop
      78:	6f c0       	rjmp	.+222    	; 0x158 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6d c0       	rjmp	.+218    	; 0x158 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6b c0       	rjmp	.+214    	; 0x158 <__bad_interrupt>
      82:	00 00       	nop
      84:	69 c0       	rjmp	.+210    	; 0x158 <__bad_interrupt>
      86:	00 00       	nop
      88:	67 c0       	rjmp	.+206    	; 0x158 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	65 c0       	rjmp	.+202    	; 0x158 <__bad_interrupt>
      8e:	00 00       	nop
      90:	63 c0       	rjmp	.+198    	; 0x158 <__bad_interrupt>
      92:	00 00       	nop
      94:	61 c0       	rjmp	.+194    	; 0x158 <__bad_interrupt>
      96:	00 00       	nop
      98:	5f c0       	rjmp	.+190    	; 0x158 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5d c0       	rjmp	.+186    	; 0x158 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5b c0       	rjmp	.+182    	; 0x158 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	59 c0       	rjmp	.+178    	; 0x158 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	57 c0       	rjmp	.+174    	; 0x158 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	55 c0       	rjmp	.+170    	; 0x158 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	53 c0       	rjmp	.+166    	; 0x158 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	51 c0       	rjmp	.+162    	; 0x158 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4f c0       	rjmp	.+158    	; 0x158 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	4d c0       	rjmp	.+154    	; 0x158 <__bad_interrupt>
      be:	00 00       	nop
      c0:	4b c0       	rjmp	.+150    	; 0x158 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	49 c0       	rjmp	.+146    	; 0x158 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	47 c0       	rjmp	.+142    	; 0x158 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	47 c2       	rjmp	.+1166   	; 0x55c <__vector_51>
      ce:	00 00       	nop
      d0:	43 c0       	rjmp	.+134    	; 0x158 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	41 c0       	rjmp	.+130    	; 0x158 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3f c0       	rjmp	.+126    	; 0x158 <__bad_interrupt>
      da:	00 00       	nop
      dc:	3d c0       	rjmp	.+122    	; 0x158 <__bad_interrupt>
      de:	00 00       	nop
      e0:	3b c0       	rjmp	.+118    	; 0x158 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2c 07       	cpc	r18, r28
      e6:	e6 06       	cpc	r14, r22
      e8:	2f 07       	cpc	r18, r31
      ea:	e9 06       	cpc	r14, r25
      ec:	ec 06       	cpc	r14, r28
      ee:	ef 06       	cpc	r14, r31
      f0:	f2 06       	cpc	r15, r18
      f2:	f5 06       	cpc	r15, r21
      f4:	f8 06       	cpc	r15, r24
      f6:	fb 06       	cpc	r15, r27
      f8:	fe 06       	cpc	r15, r30
      fa:	01 07       	cpc	r16, r17
      fc:	04 07       	cpc	r16, r20
      fe:	07 07       	cpc	r16, r23
     100:	0a 07       	cpc	r16, r26
     102:	0d 07       	cpc	r16, r29
     104:	10 07       	cpc	r17, r16
     106:	13 07       	cpc	r17, r19
     108:	16 07       	cpc	r17, r22
     10a:	19 07       	cpc	r17, r25
     10c:	1c 07       	cpc	r17, r28
     10e:	1f 07       	cpc	r17, r31
     110:	22 07       	cpc	r18, r18
     112:	25 07       	cpc	r18, r21
     114:	28 07       	cpc	r18, r24

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d1 e2       	ldi	r29, 0x21	; 33
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
     126:	12 e0       	ldi	r17, 0x02	; 2
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b2 e0       	ldi	r27, 0x02	; 2
     12c:	e8 ea       	ldi	r30, 0xA8	; 168
     12e:	f0 e2       	ldi	r31, 0x20	; 32
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	0b bf       	out	0x3b, r16	; 59
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x14>
     136:	07 90       	elpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a0 35       	cpi	r26, 0x50	; 80
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0x10>

00000140 <__do_clear_bss>:
     140:	23 e0       	ldi	r18, 0x03	; 3
     142:	a0 e5       	ldi	r26, 0x50	; 80
     144:	b2 e0       	ldi	r27, 0x02	; 2
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a0 3b       	cpi	r26, 0xB0	; 176
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <main>
     154:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <_exit>

00000158 <__bad_interrupt>:
     158:	53 cf       	rjmp	.-346    	; 0x0 <__vectors>

0000015a <buzzer_pin_config>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	f8 94       	cli
     15c:	17 b8       	out	0x07, r1	; 7
     15e:	3b 9a       	sbi	0x07, 3	; 7
     160:	78 94       	sei
     162:	08 95       	ret

00000164 <lcd_port_init>:
     164:	87 b1       	in	r24, 0x07	; 7
     166:	87 6f       	ori	r24, 0xF7	; 247
     168:	87 b9       	out	0x07, r24	; 7
     16a:	88 b1       	in	r24, 0x08	; 8
     16c:	80 78       	andi	r24, 0x80	; 128
     16e:	88 b9       	out	0x08, r24	; 8
     170:	08 95       	ret

00000172 <lcd_set_4bit>:
     172:	86 e6       	ldi	r24, 0x66	; 102
     174:	9e e0       	ldi	r25, 0x0E	; 14
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x4>
     17a:	00 00       	nop
     17c:	40 98       	cbi	0x08, 0	; 8
     17e:	41 98       	cbi	0x08, 1	; 8
     180:	80 e3       	ldi	r24, 0x30	; 48
     182:	88 b9       	out	0x08, r24	; 8
     184:	42 9a       	sbi	0x08, 2	; 8
     186:	ef ef       	ldi	r30, 0xFF	; 255
     188:	f7 e4       	ldi	r31, 0x47	; 71
     18a:	31 97       	sbiw	r30, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_set_4bit+0x18>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_set_4bit+0x1e>
     190:	00 00       	nop
     192:	42 98       	cbi	0x08, 2	; 8
     194:	e6 e6       	ldi	r30, 0x66	; 102
     196:	fe e0       	ldi	r31, 0x0E	; 14
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_set_4bit+0x26>
     19c:	00 00       	nop
     19e:	40 98       	cbi	0x08, 0	; 8
     1a0:	41 98       	cbi	0x08, 1	; 8
     1a2:	88 b9       	out	0x08, r24	; 8
     1a4:	42 9a       	sbi	0x08, 2	; 8
     1a6:	ef ef       	ldi	r30, 0xFF	; 255
     1a8:	f7 e4       	ldi	r31, 0x47	; 71
     1aa:	31 97       	sbiw	r30, 0x01	; 1
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_set_4bit+0x38>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_set_4bit+0x3e>
     1b0:	00 00       	nop
     1b2:	42 98       	cbi	0x08, 2	; 8
     1b4:	e6 e6       	ldi	r30, 0x66	; 102
     1b6:	fe e0       	ldi	r31, 0x0E	; 14
     1b8:	31 97       	sbiw	r30, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x46>
     1bc:	00 00       	nop
     1be:	40 98       	cbi	0x08, 0	; 8
     1c0:	41 98       	cbi	0x08, 1	; 8
     1c2:	88 b9       	out	0x08, r24	; 8
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	97 e4       	ldi	r25, 0x47	; 71
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_set_4bit+0x58>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_set_4bit+0x5e>
     1d0:	00 00       	nop
     1d2:	42 98       	cbi	0x08, 2	; 8
     1d4:	e6 e6       	ldi	r30, 0x66	; 102
     1d6:	fe e0       	ldi	r31, 0x0E	; 14
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_set_4bit+0x66>
     1dc:	00 00       	nop
     1de:	40 98       	cbi	0x08, 0	; 8
     1e0:	41 98       	cbi	0x08, 1	; 8
     1e2:	80 e2       	ldi	r24, 0x20	; 32
     1e4:	88 b9       	out	0x08, r24	; 8
     1e6:	42 9a       	sbi	0x08, 2	; 8
     1e8:	86 e6       	ldi	r24, 0x66	; 102
     1ea:	9e e0       	ldi	r25, 0x0E	; 14
     1ec:	01 97       	sbiw	r24, 0x01	; 1
     1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_set_4bit+0x7a>
     1f0:	00 00       	nop
     1f2:	42 98       	cbi	0x08, 2	; 8
     1f4:	08 95       	ret

000001f6 <lcd_wr_command>:
     1f6:	98 b1       	in	r25, 0x08	; 8
     1f8:	9f 70       	andi	r25, 0x0F	; 15
     1fa:	98 b9       	out	0x08, r25	; 8
     1fc:	98 b1       	in	r25, 0x08	; 8
     1fe:	28 2f       	mov	r18, r24
     200:	20 7f       	andi	r18, 0xF0	; 240
     202:	92 2b       	or	r25, r18
     204:	98 b9       	out	0x08, r25	; 8
     206:	40 98       	cbi	0x08, 0	; 8
     208:	41 98       	cbi	0x08, 1	; 8
     20a:	42 9a       	sbi	0x08, 2	; 8
     20c:	ef ef       	ldi	r30, 0xFF	; 255
     20e:	f7 e4       	ldi	r31, 0x47	; 71
     210:	31 97       	sbiw	r30, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <lcd_wr_command+0x1a>
     214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_wr_command+0x20>
     216:	00 00       	nop
     218:	42 98       	cbi	0x08, 2	; 8
     21a:	98 b1       	in	r25, 0x08	; 8
     21c:	9f 70       	andi	r25, 0x0F	; 15
     21e:	98 b9       	out	0x08, r25	; 8
     220:	98 b1       	in	r25, 0x08	; 8
     222:	82 95       	swap	r24
     224:	80 7f       	andi	r24, 0xF0	; 240
     226:	89 2b       	or	r24, r25
     228:	88 b9       	out	0x08, r24	; 8
     22a:	40 98       	cbi	0x08, 0	; 8
     22c:	41 98       	cbi	0x08, 1	; 8
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	97 e4       	ldi	r25, 0x47	; 71
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <lcd_wr_command+0x3e>
     238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_wr_command+0x44>
     23a:	00 00       	nop
     23c:	42 98       	cbi	0x08, 2	; 8
     23e:	08 95       	ret

00000240 <lcd_init>:
     240:	86 e6       	ldi	r24, 0x66	; 102
     242:	9e e0       	ldi	r25, 0x0E	; 14
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x4>
     248:	00 00       	nop
     24a:	88 e2       	ldi	r24, 0x28	; 40
     24c:	d4 df       	rcall	.-88     	; 0x1f6 <lcd_wr_command>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	d2 df       	rcall	.-92     	; 0x1f6 <lcd_wr_command>
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	d0 df       	rcall	.-96     	; 0x1f6 <lcd_wr_command>
     256:	8e e0       	ldi	r24, 0x0E	; 14
     258:	ce df       	rcall	.-100    	; 0x1f6 <lcd_wr_command>
     25a:	80 e8       	ldi	r24, 0x80	; 128
     25c:	cc cf       	rjmp	.-104    	; 0x1f6 <lcd_wr_command>
     25e:	08 95       	ret

00000260 <lcd_wr_char>:
     260:	98 b1       	in	r25, 0x08	; 8
     262:	9f 70       	andi	r25, 0x0F	; 15
     264:	98 b9       	out	0x08, r25	; 8
     266:	98 b1       	in	r25, 0x08	; 8
     268:	28 2f       	mov	r18, r24
     26a:	20 7f       	andi	r18, 0xF0	; 240
     26c:	92 2b       	or	r25, r18
     26e:	98 b9       	out	0x08, r25	; 8
     270:	40 9a       	sbi	0x08, 0	; 8
     272:	41 98       	cbi	0x08, 1	; 8
     274:	42 9a       	sbi	0x08, 2	; 8
     276:	ef ef       	ldi	r30, 0xFF	; 255
     278:	f7 e4       	ldi	r31, 0x47	; 71
     27a:	31 97       	sbiw	r30, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_wr_char+0x1a>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_wr_char+0x20>
     280:	00 00       	nop
     282:	42 98       	cbi	0x08, 2	; 8
     284:	98 b1       	in	r25, 0x08	; 8
     286:	9f 70       	andi	r25, 0x0F	; 15
     288:	98 b9       	out	0x08, r25	; 8
     28a:	98 b1       	in	r25, 0x08	; 8
     28c:	82 95       	swap	r24
     28e:	80 7f       	andi	r24, 0xF0	; 240
     290:	89 2b       	or	r24, r25
     292:	88 b9       	out	0x08, r24	; 8
     294:	40 9a       	sbi	0x08, 0	; 8
     296:	41 98       	cbi	0x08, 1	; 8
     298:	42 9a       	sbi	0x08, 2	; 8
     29a:	8f ef       	ldi	r24, 0xFF	; 255
     29c:	97 e4       	ldi	r25, 0x47	; 71
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_wr_char+0x3e>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_wr_char+0x44>
     2a4:	00 00       	nop
     2a6:	42 98       	cbi	0x08, 2	; 8
     2a8:	08 95       	ret

000002aa <lcd_home>:
     2aa:	80 e8       	ldi	r24, 0x80	; 128
     2ac:	a4 cf       	rjmp	.-184    	; 0x1f6 <lcd_wr_command>
     2ae:	08 95       	ret

000002b0 <lcd_string>:
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
     2b6:	88 81       	ld	r24, Y
     2b8:	88 23       	and	r24, r24
     2ba:	29 f0       	breq	.+10     	; 0x2c6 <lcd_string+0x16>
     2bc:	21 96       	adiw	r28, 0x01	; 1
     2be:	d0 df       	rcall	.-96     	; 0x260 <lcd_wr_char>
     2c0:	89 91       	ld	r24, Y+
     2c2:	81 11       	cpse	r24, r1
     2c4:	fc cf       	rjmp	.-8      	; 0x2be <lcd_string+0xe>
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <lcd_cursor>:
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	69 f0       	breq	.+26     	; 0x2ea <lcd_cursor+0x1e>
     2d0:	18 f4       	brcc	.+6      	; 0x2d8 <lcd_cursor+0xc>
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	31 f0       	breq	.+12     	; 0x2e2 <lcd_cursor+0x16>
     2d6:	08 95       	ret
     2d8:	83 30       	cpi	r24, 0x03	; 3
     2da:	59 f0       	breq	.+22     	; 0x2f2 <lcd_cursor+0x26>
     2dc:	84 30       	cpi	r24, 0x04	; 4
     2de:	69 f0       	breq	.+26     	; 0x2fa <lcd_cursor+0x2e>
     2e0:	08 95       	ret
     2e2:	8f e7       	ldi	r24, 0x7F	; 127
     2e4:	86 0f       	add	r24, r22
     2e6:	87 cf       	rjmp	.-242    	; 0x1f6 <lcd_wr_command>
     2e8:	08 95       	ret
     2ea:	8f eb       	ldi	r24, 0xBF	; 191
     2ec:	86 0f       	add	r24, r22
     2ee:	83 cf       	rjmp	.-250    	; 0x1f6 <lcd_wr_command>
     2f0:	08 95       	ret
     2f2:	83 e9       	ldi	r24, 0x93	; 147
     2f4:	86 0f       	add	r24, r22
     2f6:	7f cf       	rjmp	.-258    	; 0x1f6 <lcd_wr_command>
     2f8:	08 95       	ret
     2fa:	83 ed       	ldi	r24, 0xD3	; 211
     2fc:	86 0f       	add	r24, r22
     2fe:	7b cf       	rjmp	.-266    	; 0x1f6 <lcd_wr_command>
     300:	08 95       	ret

00000302 <lcd_print>:
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	8a 01       	movw	r16, r20
     30c:	e9 01       	movw	r28, r18
     30e:	88 23       	and	r24, r24
     310:	11 f0       	breq	.+4      	; 0x316 <lcd_print+0x14>
     312:	61 11       	cpse	r22, r1
     314:	02 c0       	rjmp	.+4      	; 0x31a <lcd_print+0x18>
     316:	c9 df       	rcall	.-110    	; 0x2aa <lcd_home>
     318:	01 c0       	rjmp	.+2      	; 0x31c <lcd_print+0x1a>
     31a:	d8 df       	rcall	.-80     	; 0x2cc <lcd_cursor>
     31c:	c5 30       	cpi	r28, 0x05	; 5
     31e:	d1 05       	cpc	r29, r1
     320:	09 f0       	breq	.+2      	; 0x324 <lcd_print+0x22>
     322:	d9 c0       	rjmp	.+434    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     324:	98 01       	movw	r18, r16
     326:	32 95       	swap	r19
     328:	22 95       	swap	r18
     32a:	2f 70       	andi	r18, 0x0F	; 15
     32c:	23 27       	eor	r18, r19
     32e:	3f 70       	andi	r19, 0x0F	; 15
     330:	23 27       	eor	r18, r19
     332:	a7 e4       	ldi	r26, 0x47	; 71
     334:	b3 e0       	ldi	r27, 0x03	; 3
     336:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	c0 96       	adiw	r24, 0x30	; 48
     348:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <million+0x1>
     34c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <million>
     350:	87 df       	rcall	.-242    	; 0x260 <lcd_wr_char>
     352:	98 01       	movw	r18, r16
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	36 95       	lsr	r19
     35a:	27 95       	ror	r18
     35c:	36 95       	lsr	r19
     35e:	27 95       	ror	r18
     360:	a5 ec       	ldi	r26, 0xC5	; 197
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     368:	ac 01       	movw	r20, r24
     36a:	52 95       	swap	r21
     36c:	42 95       	swap	r20
     36e:	4f 70       	andi	r20, 0x0F	; 15
     370:	45 27       	eor	r20, r21
     372:	5f 70       	andi	r21, 0x0F	; 15
     374:	45 27       	eor	r20, r21
     376:	50 93 9d 03 	sts	0x039D, r21	; 0x80039d <temp+0x1>
     37a:	40 93 9c 03 	sts	0x039C, r20	; 0x80039c <temp>
     37e:	9a 01       	movw	r18, r20
     380:	ad ec       	ldi	r26, 0xCD	; 205
     382:	bc ec       	ldi	r27, 0xCC	; 204
     384:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     388:	96 95       	lsr	r25
     38a:	87 95       	ror	r24
     38c:	96 95       	lsr	r25
     38e:	87 95       	ror	r24
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	9c 01       	movw	r18, r24
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	82 0f       	add	r24, r18
     3a8:	93 1f       	adc	r25, r19
     3aa:	9a 01       	movw	r18, r20
     3ac:	28 1b       	sub	r18, r24
     3ae:	39 0b       	sbc	r19, r25
     3b0:	c9 01       	movw	r24, r18
     3b2:	c0 96       	adiw	r24, 0x30	; 48
     3b4:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <thousand+0x1>
     3b8:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <thousand>
     3bc:	51 df       	rcall	.-350    	; 0x260 <lcd_wr_char>
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <lcd_print+0xc4>
     3c0:	c3 30       	cpi	r28, 0x03	; 3
     3c2:	d1 05       	cpc	r29, r1
     3c4:	89 f5       	brne	.+98     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3c6:	98 01       	movw	r18, r16
     3c8:	36 95       	lsr	r19
     3ca:	27 95       	ror	r18
     3cc:	36 95       	lsr	r19
     3ce:	27 95       	ror	r18
     3d0:	ab e7       	ldi	r26, 0x7B	; 123
     3d2:	b4 e1       	ldi	r27, 0x14	; 20
     3d4:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     3d8:	ac 01       	movw	r20, r24
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	50 93 9d 03 	sts	0x039D, r21	; 0x80039d <temp+0x1>
     3e2:	40 93 9c 03 	sts	0x039C, r20	; 0x80039c <temp>
     3e6:	9a 01       	movw	r18, r20
     3e8:	ad ec       	ldi	r26, 0xCD	; 205
     3ea:	bc ec       	ldi	r27, 0xCC	; 204
     3ec:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     3f0:	96 95       	lsr	r25
     3f2:	87 95       	ror	r24
     3f4:	96 95       	lsr	r25
     3f6:	87 95       	ror	r24
     3f8:	96 95       	lsr	r25
     3fa:	87 95       	ror	r24
     3fc:	9c 01       	movw	r18, r24
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	9a 01       	movw	r18, r20
     414:	28 1b       	sub	r18, r24
     416:	39 0b       	sbc	r19, r25
     418:	c9 01       	movw	r24, r18
     41a:	c0 96       	adiw	r24, 0x30	; 48
     41c:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <hundred+0x1>
     420:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <hundred>
     424:	1d df       	rcall	.-454    	; 0x260 <lcd_wr_char>
     426:	04 c0       	rjmp	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	c2 30       	cpi	r28, 0x02	; 2
     42a:	d1 05       	cpc	r29, r1
     42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	58 c0       	rjmp	.+176    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     430:	98 01       	movw	r18, r16
     432:	ad ec       	ldi	r26, 0xCD	; 205
     434:	bc ec       	ldi	r27, 0xCC	; 204
     436:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     43a:	ac 01       	movw	r20, r24
     43c:	56 95       	lsr	r21
     43e:	47 95       	ror	r20
     440:	56 95       	lsr	r21
     442:	47 95       	ror	r20
     444:	56 95       	lsr	r21
     446:	47 95       	ror	r20
     448:	50 93 9d 03 	sts	0x039D, r21	; 0x80039d <temp+0x1>
     44c:	40 93 9c 03 	sts	0x039C, r20	; 0x80039c <temp>
     450:	9a 01       	movw	r18, r20
     452:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	96 95       	lsr	r25
     45c:	87 95       	ror	r24
     45e:	96 95       	lsr	r25
     460:	87 95       	ror	r24
     462:	9c 01       	movw	r18, r24
     464:	22 0f       	add	r18, r18
     466:	33 1f       	adc	r19, r19
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	9a 01       	movw	r18, r20
     47a:	28 1b       	sub	r18, r24
     47c:	39 0b       	sbc	r19, r25
     47e:	c9 01       	movw	r24, r18
     480:	c0 96       	adiw	r24, 0x30	; 48
     482:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <tens+0x1>
     486:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <tens>
     48a:	ea de       	rcall	.-556    	; 0x260 <lcd_wr_char>
     48c:	98 01       	movw	r18, r16
     48e:	ad ec       	ldi	r26, 0xCD	; 205
     490:	bc ec       	ldi	r27, 0xCC	; 204
     492:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__umulhisi3>
     496:	96 95       	lsr	r25
     498:	87 95       	ror	r24
     49a:	96 95       	lsr	r25
     49c:	87 95       	ror	r24
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
     4a2:	9c 01       	movw	r18, r24
     4a4:	22 0f       	add	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	82 0f       	add	r24, r18
     4b6:	93 1f       	adc	r25, r19
     4b8:	98 01       	movw	r18, r16
     4ba:	28 1b       	sub	r18, r24
     4bc:	39 0b       	sbc	r19, r25
     4be:	c9 01       	movw	r24, r18
     4c0:	c0 96       	adiw	r24, 0x30	; 48
     4c2:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <unit+0x1>
     4c6:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <unit>
     4ca:	ca de       	rcall	.-620    	; 0x260 <lcd_wr_char>
     4cc:	26 97       	sbiw	r28, 0x06	; 6
     4ce:	64 f0       	brlt	.+24     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4d0:	85 e4       	ldi	r24, 0x45	; 69
     4d2:	c6 de       	rcall	.-628    	; 0x260 <lcd_wr_char>
     4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4d6:	c4 30       	cpi	r28, 0x04	; 4
     4d8:	d1 05       	cpc	r29, r1
     4da:	09 f0       	breq	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4dc:	71 cf       	rjmp	.-286    	; 0x3c0 <lcd_print+0xbe>
     4de:	39 cf       	rjmp	.-398    	; 0x352 <lcd_print+0x50>
     4e0:	c1 30       	cpi	r28, 0x01	; 1
     4e2:	d1 05       	cpc	r29, r1
     4e4:	99 f7       	brne	.-26     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4e6:	d2 cf       	rjmp	.-92     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	08 95       	ret

000004f2 <uart2_init>:
     4f2:	e1 ed       	ldi	r30, 0xD1	; 209
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	10 82       	st	Z, r1
     4f8:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     502:	8f e5       	ldi	r24, 0x5F	; 95
     504:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     508:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     50c:	88 e9       	ldi	r24, 0x98	; 152
     50e:	80 83       	st	Z, r24
     510:	08 95       	ret

00000512 <display>:
     512:	f8 94       	cli
     514:	2e de       	rcall	.-932    	; 0x172 <lcd_set_4bit>
     516:	94 de       	rcall	.-728    	; 0x240 <lcd_init>
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	d7 de       	rcall	.-594    	; 0x2cc <lcd_cursor>
     51e:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <i+0x1>
     522:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <i>
     526:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <input_str>
     52a:	83 32       	cpi	r24, 0x23	; 35
     52c:	b1 f0       	breq	.+44     	; 0x55a <display+0x48>
     52e:	8a 30       	cpi	r24, 0x0A	; 10
     530:	21 f4       	brne	.+8      	; 0x53a <display+0x28>
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	ca de       	rcall	.-620    	; 0x2cc <lcd_cursor>
     538:	01 c0       	rjmp	.+2      	; 0x53c <display+0x2a>
     53a:	92 de       	rcall	.-732    	; 0x260 <lcd_wr_char>
     53c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <i>
     540:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <i+0x1>
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <i+0x1>
     54a:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <i>
     54e:	fc 01       	movw	r30, r24
     550:	e9 5d       	subi	r30, 0xD9	; 217
     552:	fc 4f       	sbci	r31, 0xFC	; 252
     554:	80 81       	ld	r24, Z
     556:	83 32       	cpi	r24, 0x23	; 35
     558:	51 f7       	brne	.-44     	; 0x52e <display+0x1c>
     55a:	08 95       	ret

0000055c <__vector_51>:
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	cf 93       	push	r28
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
     584:	c0 91 d6 00 	lds	r28, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     588:	c0 93 a6 03 	sts	0x03A6, r28	; 0x8003a6 <data>
     58c:	66 ea       	ldi	r22, 0xA6	; 166
     58e:	73 e0       	ldi	r23, 0x03	; 3
     590:	87 e2       	ldi	r24, 0x27	; 39
     592:	93 e0       	ldi	r25, 0x03	; 3
     594:	0e 94 18 10 	call	0x2030	; 0x2030 <strcat>
     598:	c3 32       	cpi	r28, 0x23	; 35
     59a:	09 f4       	brne	.+2      	; 0x59e <__vector_51+0x42>
     59c:	ba df       	rcall	.-140    	; 0x512 <display>
     59e:	ff 91       	pop	r31
     5a0:	ef 91       	pop	r30
     5a2:	cf 91       	pop	r28
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0b be       	out	0x3b, r0	; 59
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <servo1_pin_config>:
     5c6:	25 9a       	sbi	0x04, 5	; 4
     5c8:	2d 9a       	sbi	0x05, 5	; 5
     5ca:	08 95       	ret

000005cc <servo2_pin_config>:
     5cc:	26 9a       	sbi	0x04, 6	; 4
     5ce:	2e 9a       	sbi	0x05, 6	; 5
     5d0:	08 95       	ret

000005d2 <servo3_pin_config>:
     5d2:	27 9a       	sbi	0x04, 7	; 4
     5d4:	2f 9a       	sbi	0x05, 7	; 5
     5d6:	08 95       	ret

000005d8 <servo_init>:
     5d8:	f6 df       	rcall	.-20     	; 0x5c6 <servo1_pin_config>
     5da:	f8 df       	rcall	.-16     	; 0x5cc <servo2_pin_config>
     5dc:	fa cf       	rjmp	.-12     	; 0x5d2 <servo3_pin_config>
     5de:	08 95       	ret

000005e0 <timer1_init>:
     5e0:	e1 e8       	ldi	r30, 0x81	; 129
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	10 82       	st	Z, r1
     5e6:	8c ef       	ldi	r24, 0xFC	; 252
     5e8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     5fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     602:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     606:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     60a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     60e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     612:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     616:	8b ea       	ldi	r24, 0xAB	; 171
     618:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     61c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     620:	8c e0       	ldi	r24, 0x0C	; 12
     622:	80 83       	st	Z, r24
     624:	08 95       	ret

00000626 <servo_1_free>:
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     62c:	8f ef       	ldi	r24, 0xFF	; 255
     62e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     632:	08 95       	ret

00000634 <servo_2_free>:
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     640:	08 95       	ret

00000642 <servo_3_free>:
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     64e:	08 95       	ret

00000650 <init_servo>:
     650:	f8 94       	cli
     652:	c2 df       	rcall	.-124    	; 0x5d8 <servo_init>
     654:	c5 df       	rcall	.-118    	; 0x5e0 <timer1_init>
     656:	78 94       	sei
     658:	08 95       	ret

0000065a <adc_pin_config>:
     65a:	10 ba       	out	0x10, r1	; 16
     65c:	11 ba       	out	0x11, r1	; 17
     65e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     662:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     666:	08 95       	ret

00000668 <adc_init>:
     668:	ea e7       	ldi	r30, 0x7A	; 122
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	10 82       	st	Z, r1
     66e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     672:	80 e2       	ldi	r24, 0x20	; 32
     674:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     678:	80 e8       	ldi	r24, 0x80	; 128
     67a:	80 bf       	out	0x30, r24	; 48
     67c:	86 e8       	ldi	r24, 0x86	; 134
     67e:	80 83       	st	Z, r24
     680:	08 95       	ret

00000682 <ADC_init>:
     682:	eb df       	rcall	.-42     	; 0x65a <adc_pin_config>
     684:	f1 cf       	rjmp	.-30     	; 0x668 <adc_init>
     686:	08 95       	ret

00000688 <ADC_Conversion>:
     688:	88 30       	cpi	r24, 0x08	; 8
     68a:	18 f0       	brcs	.+6      	; 0x692 <ADC_Conversion+0xa>
     68c:	98 e0       	ldi	r25, 0x08	; 8
     68e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     692:	87 70       	andi	r24, 0x07	; 7
     694:	80 62       	ori	r24, 0x20	; 32
     696:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     69a:	ea e7       	ldi	r30, 0x7A	; 122
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	80 64       	ori	r24, 0x40	; 64
     6a2:	80 83       	st	Z, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	84 ff       	sbrs	r24, 4
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <ADC_Conversion+0x1c>
     6aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     6ae:	ea e7       	ldi	r30, 0x7A	; 122
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	90 81       	ld	r25, Z
     6b4:	90 61       	ori	r25, 0x10	; 16
     6b6:	90 83       	st	Z, r25
     6b8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     6bc:	08 95       	ret

000006be <return_sensor>:
     6be:	e4 df       	rcall	.-56     	; 0x688 <ADC_Conversion>
     6c0:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <ADC_Value>
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret

000006c8 <motion_pin_config>:
     6c8:	81 b1       	in	r24, 0x01	; 1
     6ca:	8f 60       	ori	r24, 0x0F	; 15
     6cc:	81 b9       	out	0x01, r24	; 1
     6ce:	82 b1       	in	r24, 0x02	; 2
     6d0:	80 7f       	andi	r24, 0xF0	; 240
     6d2:	82 b9       	out	0x02, r24	; 2
     6d4:	ea e0       	ldi	r30, 0x0A	; 10
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	80 81       	ld	r24, Z
     6da:	88 61       	ori	r24, 0x18	; 24
     6dc:	80 83       	st	Z, r24
     6de:	eb e0       	ldi	r30, 0x0B	; 11
     6e0:	f1 e0       	ldi	r31, 0x01	; 1
     6e2:	80 81       	ld	r24, Z
     6e4:	88 61       	ori	r24, 0x18	; 24
     6e6:	80 83       	st	Z, r24
     6e8:	08 95       	ret

000006ea <timer5_init>:
     6ea:	e1 e2       	ldi	r30, 0x21	; 33
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     6fc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     700:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     704:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     708:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     70c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     710:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
     714:	89 ea       	ldi	r24, 0xA9	; 169
     716:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     71a:	8b e0       	ldi	r24, 0x0B	; 11
     71c:	80 83       	st	Z, r24
     71e:	08 95       	ret

00000720 <motion_set>:
     720:	92 b1       	in	r25, 0x02	; 2
     722:	90 7f       	andi	r25, 0xF0	; 240
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	98 2b       	or	r25, r24
     728:	92 b9       	out	0x02, r25	; 2
     72a:	08 95       	ret

0000072c <forward>:
     72c:	86 e0       	ldi	r24, 0x06	; 6
     72e:	f8 cf       	rjmp	.-16     	; 0x720 <motion_set>
     730:	08 95       	ret

00000732 <left>:
     732:	85 e0       	ldi	r24, 0x05	; 5
     734:	f5 cf       	rjmp	.-22     	; 0x720 <motion_set>
     736:	08 95       	ret

00000738 <right>:
     738:	8a e0       	ldi	r24, 0x0A	; 10
     73a:	f2 cf       	rjmp	.-28     	; 0x720 <motion_set>
     73c:	08 95       	ret

0000073e <stop>:
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	ef cf       	rjmp	.-34     	; 0x720 <motion_set>
     742:	08 95       	ret

00000744 <left_encoder_pin_config>:
     744:	6c 98       	cbi	0x0d, 4	; 13
     746:	74 9a       	sbi	0x0e, 4	; 14
     748:	08 95       	ret

0000074a <right_encoder_pin_config>:
     74a:	6d 98       	cbi	0x0d, 5	; 13
     74c:	75 9a       	sbi	0x0e, 5	; 14
     74e:	08 95       	ret

00000750 <left_position_encoder_interrupt_init>:
     750:	f8 94       	cli
     752:	ea e6       	ldi	r30, 0x6A	; 106
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	80 83       	st	Z, r24
     75c:	ec 9a       	sbi	0x1d, 4	; 29
     75e:	78 94       	sei
     760:	08 95       	ret

00000762 <right_position_encoder_interrupt_init>:
     762:	f8 94       	cli
     764:	ea e6       	ldi	r30, 0x6A	; 106
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	88 60       	ori	r24, 0x08	; 8
     76c:	80 83       	st	Z, r24
     76e:	ed 9a       	sbi	0x1d, 5	; 29
     770:	78 94       	sei
     772:	08 95       	ret

00000774 <__vector_6>:
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <ShaftCountRight>
     78a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <ShaftCountRight+0x1>
     78e:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <ShaftCountRight+0x2>
     792:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <ShaftCountRight+0x3>
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	a1 1d       	adc	r26, r1
     79a:	b1 1d       	adc	r27, r1
     79c:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <ShaftCountRight>
     7a0:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <ShaftCountRight+0x1>
     7a4:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <ShaftCountRight+0x2>
     7a8:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <ShaftCountRight+0x3>
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_5>:
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <ShaftCountLeft>
     7d4:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <ShaftCountLeft+0x1>
     7d8:	a0 91 91 03 	lds	r26, 0x0391	; 0x800391 <ShaftCountLeft+0x2>
     7dc:	b0 91 92 03 	lds	r27, 0x0392	; 0x800392 <ShaftCountLeft+0x3>
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	a1 1d       	adc	r26, r1
     7e4:	b1 1d       	adc	r27, r1
     7e6:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ShaftCountLeft>
     7ea:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ShaftCountLeft+0x1>
     7ee:	a0 93 91 03 	sts	0x0391, r26	; 0x800391 <ShaftCountLeft+0x2>
     7f2:	b0 93 92 03 	sts	0x0392, r27	; 0x800392 <ShaftCountLeft+0x3>
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <angle_rotate>:
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	bc 01       	movw	r22, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__floatunsisf>
     81e:	28 e4       	ldi	r18, 0x48	; 72
     820:	31 ee       	ldi	r19, 0xE1	; 225
     822:	42 e8       	ldi	r20, 0x82	; 130
     824:	50 e4       	ldi	r21, 0x40	; 64
     826:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__divsf3>
     82a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fixunssfsi>
     82e:	ab 01       	movw	r20, r22
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <ShaftCountRight>
     838:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <ShaftCountRight+0x1>
     83c:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <ShaftCountRight+0x2>
     840:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <ShaftCountRight+0x3>
     844:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <ShaftCountLeft>
     848:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <ShaftCountLeft+0x1>
     84c:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <ShaftCountLeft+0x2>
     850:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <ShaftCountLeft+0x3>
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	e0 e0       	ldi	r30, 0x00	; 0
     858:	00 91 8b 03 	lds	r16, 0x038B	; 0x80038b <ShaftCountRight>
     85c:	10 91 8c 03 	lds	r17, 0x038C	; 0x80038c <ShaftCountRight+0x1>
     860:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <ShaftCountRight+0x2>
     864:	30 91 8e 03 	lds	r19, 0x038E	; 0x80038e <ShaftCountRight+0x3>
     868:	c0 90 8f 03 	lds	r12, 0x038F	; 0x80038f <ShaftCountLeft>
     86c:	d0 90 90 03 	lds	r13, 0x0390	; 0x800390 <ShaftCountLeft+0x1>
     870:	e0 90 91 03 	lds	r14, 0x0391	; 0x800391 <ShaftCountLeft+0x2>
     874:	f0 90 92 03 	lds	r15, 0x0392	; 0x800392 <ShaftCountLeft+0x3>
     878:	89 2f       	mov	r24, r25
     87a:	04 17       	cp	r16, r20
     87c:	15 07       	cpc	r17, r21
     87e:	26 07       	cpc	r18, r22
     880:	37 07       	cpc	r19, r23
     882:	08 f4       	brcc	.+2      	; 0x886 <angle_rotate+0x7e>
     884:	8e 2f       	mov	r24, r30
     886:	81 11       	cpse	r24, r1
     888:	09 c0       	rjmp	.+18     	; 0x89c <angle_rotate+0x94>
     88a:	89 2f       	mov	r24, r25
     88c:	c4 16       	cp	r12, r20
     88e:	d5 06       	cpc	r13, r21
     890:	e6 06       	cpc	r14, r22
     892:	f7 06       	cpc	r15, r23
     894:	08 f4       	brcc	.+2      	; 0x898 <angle_rotate+0x90>
     896:	8e 2f       	mov	r24, r30
     898:	88 23       	and	r24, r24
     89a:	f1 f2       	breq	.-68     	; 0x858 <angle_rotate+0x50>
     89c:	50 df       	rcall	.-352    	; 0x73e <stop>
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	08 95       	ret

000008ac <left_degrees>:
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	3f df       	rcall	.-386    	; 0x732 <left>
     8b4:	ce 01       	movw	r24, r28
     8b6:	a8 df       	rcall	.-176    	; 0x808 <angle_rotate>
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <right_degrees>:
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	39 df       	rcall	.-398    	; 0x738 <right>
     8c6:	ce 01       	movw	r24, r28
     8c8:	9f df       	rcall	.-194    	; 0x808 <angle_rotate>
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <init_motion>:
     8d0:	f8 94       	cli
     8d2:	fa de       	rcall	.-524    	; 0x6c8 <motion_pin_config>
     8d4:	37 df       	rcall	.-402    	; 0x744 <left_encoder_pin_config>
     8d6:	39 df       	rcall	.-398    	; 0x74a <right_encoder_pin_config>
     8d8:	3b df       	rcall	.-394    	; 0x750 <left_position_encoder_interrupt_init>
     8da:	43 df       	rcall	.-378    	; 0x762 <right_position_encoder_interrupt_init>
     8dc:	06 df       	rcall	.-500    	; 0x6ea <timer5_init>
     8de:	78 94       	sei
     8e0:	08 95       	ret

000008e2 <straight_arm_free>:
     8e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     8e6:	89 e6       	ldi	r24, 0x69	; 105
     8e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	8f e7       	ldi	r24, 0x7F	; 127
     8f0:	94 e0       	ldi	r25, 0x04	; 4
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <straight_arm_free+0x10>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <straight_arm_free+0x1a>
     8fc:	00 00       	nop
     8fe:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     902:	8f e5       	ldi	r24, 0x5F	; 95
     904:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	9c e2       	ldi	r25, 0x2C	; 44
     90e:	21 50       	subi	r18, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <straight_arm_free+0x2c>
     916:	00 c0       	rjmp	.+0      	; 0x918 <straight_arm_free+0x36>
     918:	00 00       	nop
     91a:	93 de       	rcall	.-730    	; 0x642 <servo_3_free>
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	98 e0       	ldi	r25, 0x08	; 8
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <straight_arm_free+0x40>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <straight_arm_free+0x4a>
     92c:	00 00       	nop
     92e:	82 de       	rcall	.-764    	; 0x634 <servo_2_free>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	98 e0       	ldi	r25, 0x08	; 8
     936:	21 50       	subi	r18, 0x01	; 1
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <straight_arm_free+0x54>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <straight_arm_free+0x5e>
     940:	00 00       	nop
     942:	71 ce       	rjmp	.-798    	; 0x626 <servo_1_free>
     944:	08 95       	ret

00000946 <normal_grab_and_hold>:
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	29 e8       	ldi	r18, 0x89	; 137
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	e9 01       	movw	r28, r18
     954:	18 82       	st	Y, r1
     956:	08 e8       	ldi	r16, 0x88	; 136
     958:	10 e0       	ldi	r17, 0x00	; 0
     95a:	89 e6       	ldi	r24, 0x69	; 105
     95c:	f8 01       	movw	r30, r16
     95e:	80 83       	st	Z, r24
     960:	ff ef       	ldi	r31, 0xFF	; 255
     962:	4f e7       	ldi	r20, 0x7F	; 127
     964:	54 e0       	ldi	r21, 0x04	; 4
     966:	f1 50       	subi	r31, 0x01	; 1
     968:	40 40       	sbci	r20, 0x00	; 0
     96a:	50 40       	sbci	r21, 0x00	; 0
     96c:	e1 f7       	brne	.-8      	; 0x966 <normal_grab_and_hold+0x20>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <normal_grab_and_hold+0x2a>
     970:	00 00       	nop
     972:	ab e8       	ldi	r26, 0x8B	; 139
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	1c 92       	st	X, r1
     978:	ea e8       	ldi	r30, 0x8A	; 138
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	98 e5       	ldi	r25, 0x58	; 88
     97e:	90 83       	st	Z, r25
     980:	9f ef       	ldi	r25, 0xFF	; 255
     982:	cf ef       	ldi	r28, 0xFF	; 255
     984:	d8 e0       	ldi	r29, 0x08	; 8
     986:	91 50       	subi	r25, 0x01	; 1
     988:	c0 40       	sbci	r28, 0x00	; 0
     98a:	d0 40       	sbci	r29, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <normal_grab_and_hold+0x40>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <normal_grab_and_hold+0x4a>
     990:	00 00       	nop
     992:	6d e8       	ldi	r22, 0x8D	; 141
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	eb 01       	movw	r28, r22
     998:	18 82       	st	Y, r1
     99a:	4c e8       	ldi	r20, 0x8C	; 140
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	90 e2       	ldi	r25, 0x20	; 32
     9a0:	ea 01       	movw	r28, r20
     9a2:	98 83       	st	Y, r25
     9a4:	df ef       	ldi	r29, 0xFF	; 255
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	cc e2       	ldi	r28, 0x2C	; 44
     9aa:	d1 50       	subi	r29, 0x01	; 1
     9ac:	90 40       	sbci	r25, 0x00	; 0
     9ae:	c0 40       	sbci	r28, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <normal_grab_and_hold+0x64>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <normal_grab_and_hold+0x6e>
     9b4:	00 00       	nop
     9b6:	1c 92       	st	X, r1
     9b8:	9b e1       	ldi	r25, 0x1B	; 27
     9ba:	90 83       	st	Z, r25
     9bc:	df ef       	ldi	r29, 0xFF	; 255
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	cc e2       	ldi	r28, 0x2C	; 44
     9c2:	d1 50       	subi	r29, 0x01	; 1
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	c0 40       	sbci	r28, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <normal_grab_and_hold+0x7c>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <normal_grab_and_hold+0x86>
     9cc:	00 00       	nop
     9ce:	eb 01       	movw	r28, r22
     9d0:	18 82       	st	Y, r1
     9d2:	9f e3       	ldi	r25, 0x3F	; 63
     9d4:	ea 01       	movw	r28, r20
     9d6:	98 83       	st	Y, r25
     9d8:	df ef       	ldi	r29, 0xFF	; 255
     9da:	4f ef       	ldi	r20, 0xFF	; 255
     9dc:	5c e2       	ldi	r21, 0x2C	; 44
     9de:	d1 50       	subi	r29, 0x01	; 1
     9e0:	40 40       	sbci	r20, 0x00	; 0
     9e2:	50 40       	sbci	r21, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <normal_grab_and_hold+0x98>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <normal_grab_and_hold+0xa2>
     9e8:	00 00       	nop
     9ea:	e9 01       	movw	r28, r18
     9ec:	18 82       	st	Y, r1
     9ee:	e8 01       	movw	r28, r16
     9f0:	88 83       	st	Y, r24
     9f2:	df ef       	ldi	r29, 0xFF	; 255
     9f4:	2f e7       	ldi	r18, 0x7F	; 127
     9f6:	44 e0       	ldi	r20, 0x04	; 4
     9f8:	d1 50       	subi	r29, 0x01	; 1
     9fa:	20 40       	sbci	r18, 0x00	; 0
     9fc:	40 40       	sbci	r20, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <normal_grab_and_hold+0xb2>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <normal_grab_and_hold+0xbc>
     a02:	00 00       	nop
     a04:	1c 92       	st	X, r1
     a06:	8f e5       	ldi	r24, 0x5F	; 95
     a08:	80 83       	st	Z, r24
     a0a:	5f ef       	ldi	r21, 0xFF	; 255
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	9c e2       	ldi	r25, 0x2C	; 44
     a10:	51 50       	subi	r21, 0x01	; 1
     a12:	80 40       	sbci	r24, 0x00	; 0
     a14:	90 40       	sbci	r25, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <normal_grab_and_hold+0xca>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <normal_grab_and_hold+0xd4>
     a1a:	00 00       	nop
     a1c:	04 de       	rcall	.-1016   	; 0x626 <servo_1_free>
     a1e:	0a de       	rcall	.-1004   	; 0x634 <servo_2_free>
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <extended_grab_and_hold>:
     a2a:	af 92       	push	r10
     a2c:	bf 92       	push	r11
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	0f 2e       	mov	r0, r31
     a40:	f9 e8       	ldi	r31, 0x89	; 137
     a42:	cf 2e       	mov	r12, r31
     a44:	d1 2c       	mov	r13, r1
     a46:	f0 2d       	mov	r31, r0
     a48:	f6 01       	movw	r30, r12
     a4a:	10 82       	st	Z, r1
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f8 e8       	ldi	r31, 0x88	; 136
     a50:	ef 2e       	mov	r14, r31
     a52:	f1 2c       	mov	r15, r1
     a54:	f0 2d       	mov	r31, r0
     a56:	0f 2e       	mov	r0, r31
     a58:	f9 e6       	ldi	r31, 0x69	; 105
     a5a:	af 2e       	mov	r10, r31
     a5c:	f0 2d       	mov	r31, r0
     a5e:	f7 01       	movw	r30, r14
     a60:	a0 82       	st	Z, r10
     a62:	ff ef       	ldi	r31, 0xFF	; 255
     a64:	2f e7       	ldi	r18, 0x7F	; 127
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	f1 50       	subi	r31, 0x01	; 1
     a6a:	20 40       	sbci	r18, 0x00	; 0
     a6c:	80 40       	sbci	r24, 0x00	; 0
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <extended_grab_and_hold+0x3e>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <extended_grab_and_hold+0x48>
     a72:	00 00       	nop
     a74:	0b e8       	ldi	r16, 0x8B	; 139
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	f8 01       	movw	r30, r16
     a7a:	10 82       	st	Z, r1
     a7c:	ca e8       	ldi	r28, 0x8A	; 138
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	0f 2e       	mov	r0, r31
     a82:	ff e5       	ldi	r31, 0x5F	; 95
     a84:	bf 2e       	mov	r11, r31
     a86:	f0 2d       	mov	r31, r0
     a88:	b8 82       	st	Y, r11
     a8a:	ff ef       	ldi	r31, 0xFF	; 255
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	f1 50       	subi	r31, 0x01	; 1
     a92:	20 40       	sbci	r18, 0x00	; 0
     a94:	80 40       	sbci	r24, 0x00	; 0
     a96:	e1 f7       	brne	.-8      	; 0xa90 <extended_grab_and_hold+0x66>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <extended_grab_and_hold+0x70>
     a9a:	00 00       	nop
     a9c:	ad e8       	ldi	r26, 0x8D	; 141
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	1c 92       	st	X, r1
     aa2:	4c e8       	ldi	r20, 0x8C	; 140
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	80 e2       	ldi	r24, 0x20	; 32
     aa8:	fa 01       	movw	r30, r20
     aaa:	80 83       	st	Z, r24
     aac:	ff ef       	ldi	r31, 0xFF	; 255
     aae:	2f e7       	ldi	r18, 0x7F	; 127
     ab0:	86 e1       	ldi	r24, 0x16	; 22
     ab2:	f1 50       	subi	r31, 0x01	; 1
     ab4:	20 40       	sbci	r18, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <extended_grab_and_hold+0x88>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <extended_grab_and_hold+0x92>
     abc:	00 00       	nop
     abe:	f8 01       	movw	r30, r16
     ac0:	10 82       	st	Z, r1
     ac2:	84 e3       	ldi	r24, 0x34	; 52
     ac4:	88 83       	st	Y, r24
     ac6:	ff ef       	ldi	r31, 0xFF	; 255
     ac8:	2f ef       	ldi	r18, 0xFF	; 255
     aca:	88 e0       	ldi	r24, 0x08	; 8
     acc:	f1 50       	subi	r31, 0x01	; 1
     ace:	20 40       	sbci	r18, 0x00	; 0
     ad0:	80 40       	sbci	r24, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <extended_grab_and_hold+0xa2>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <extended_grab_and_hold+0xac>
     ad6:	00 00       	nop
     ad8:	f6 01       	movw	r30, r12
     ada:	10 82       	st	Z, r1
     adc:	80 e5       	ldi	r24, 0x50	; 80
     ade:	f7 01       	movw	r30, r14
     ae0:	80 83       	st	Z, r24
     ae2:	ff ef       	ldi	r31, 0xFF	; 255
     ae4:	2f ef       	ldi	r18, 0xFF	; 255
     ae6:	8c e2       	ldi	r24, 0x2C	; 44
     ae8:	f1 50       	subi	r31, 0x01	; 1
     aea:	20 40       	sbci	r18, 0x00	; 0
     aec:	80 40       	sbci	r24, 0x00	; 0
     aee:	e1 f7       	brne	.-8      	; 0xae8 <extended_grab_and_hold+0xbe>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <extended_grab_and_hold+0xc8>
     af2:	00 00       	nop
     af4:	1c 92       	st	X, r1
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	fa 01       	movw	r30, r20
     afa:	80 83       	st	Z, r24
     afc:	ff ef       	ldi	r31, 0xFF	; 255
     afe:	2f e7       	ldi	r18, 0x7F	; 127
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	f1 50       	subi	r31, 0x01	; 1
     b04:	20 40       	sbci	r18, 0x00	; 0
     b06:	80 40       	sbci	r24, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <extended_grab_and_hold+0xd8>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <extended_grab_and_hold+0xe2>
     b0c:	00 00       	nop
     b0e:	92 dd       	rcall	.-1244   	; 0x634 <servo_2_free>
     b10:	9f ef       	ldi	r25, 0xFF	; 255
     b12:	ef ef       	ldi	r30, 0xFF	; 255
     b14:	fc e2       	ldi	r31, 0x2C	; 44
     b16:	91 50       	subi	r25, 0x01	; 1
     b18:	e0 40       	sbci	r30, 0x00	; 0
     b1a:	f0 40       	sbci	r31, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <extended_grab_and_hold+0xec>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <extended_grab_and_hold+0xf6>
     b20:	00 00       	nop
     b22:	f6 01       	movw	r30, r12
     b24:	10 82       	st	Z, r1
     b26:	f7 01       	movw	r30, r14
     b28:	a0 82       	st	Z, r10
     b2a:	ff ef       	ldi	r31, 0xFF	; 255
     b2c:	2f e7       	ldi	r18, 0x7F	; 127
     b2e:	86 e1       	ldi	r24, 0x16	; 22
     b30:	f1 50       	subi	r31, 0x01	; 1
     b32:	20 40       	sbci	r18, 0x00	; 0
     b34:	80 40       	sbci	r24, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <extended_grab_and_hold+0x106>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <extended_grab_and_hold+0x110>
     b3a:	00 00       	nop
     b3c:	f8 01       	movw	r30, r16
     b3e:	10 82       	st	Z, r1
     b40:	b8 82       	st	Y, r11
     b42:	ff ef       	ldi	r31, 0xFF	; 255
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	8c e2       	ldi	r24, 0x2C	; 44
     b48:	f1 50       	subi	r31, 0x01	; 1
     b4a:	20 40       	sbci	r18, 0x00	; 0
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <extended_grab_and_hold+0x11e>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <extended_grab_and_hold+0x128>
     b52:	00 00       	nop
     b54:	68 dd       	rcall	.-1328   	; 0x626 <servo_1_free>
     b56:	6e dd       	rcall	.-1316   	; 0x634 <servo_2_free>
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	08 95       	ret

00000b6e <deposit>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = (float)degrees ;
	OCR1AH = 0x00;
     b6e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = (unsigned char) PositionPanServo;
     b72:	89 e6       	ldi	r24, 0x69	; 105
     b74:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     b78:	2f ef       	ldi	r18, 0xFF	; 255
     b7a:	8f e7       	ldi	r24, 0x7F	; 127
     b7c:	96 e1       	ldi	r25, 0x16	; 22
     b7e:	21 50       	subi	r18, 0x01	; 1
     b80:	80 40       	sbci	r24, 0x00	; 0
     b82:	90 40       	sbci	r25, 0x00	; 0
     b84:	e1 f7       	brne	.-8      	; 0xb7e <deposit+0x10>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <deposit+0x1a>
     b88:	00 00       	nop
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = (float)degrees ;
	OCR1BH = 0x00;
     b8a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
	OCR1BL = (unsigned char) PositionTiltServo;
     b8e:	8c e1       	ldi	r24, 0x1C	; 28
     b90:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9c e2       	ldi	r25, 0x2C	; 44
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <deposit+0x2c>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <deposit+0x36>
     ba4:	00 00       	nop
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = (float)degrees;
	OCR1CH = 0x00;
     ba6:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
	OCR1CL = (unsigned char) PositionServo;
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	8f e7       	ldi	r24, 0x7F	; 127
     bb4:	9f e1       	ldi	r25, 0x1F	; 31
     bb6:	21 50       	subi	r18, 0x01	; 1
     bb8:	80 40       	sbci	r24, 0x00	; 0
     bba:	90 40       	sbci	r25, 0x00	; 0
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <deposit+0x48>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <deposit+0x52>
     bc0:	00 00       	nop
	_delay_ms(1000);
	servo_3(32);
	_delay_ms(700);
	

	straight_arm_free();
     bc2:	8f ce       	rjmp	.-738    	; 0x8e2 <straight_arm_free>
     bc4:	08 95       	ret

00000bc6 <sensor_value>:
unsigned char Center_sensor = 0;
unsigned char Right_sensor = 0;

void sensor_value(){
	
	Left_sensor=return_sensor(3);
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	7a dd       	rcall	.-1292   	; 0x6be <return_sensor>
     bca:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <Left_sensor>
	Center_sensor=return_sensor(2);
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	76 dd       	rcall	.-1300   	; 0x6be <return_sensor>
     bd2:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <Center_sensor>
	Right_sensor=return_sensor(1);
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	72 dd       	rcall	.-1308   	; 0x6be <return_sensor>
     bda:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <Right_sensor>
     bde:	08 95       	ret

00000be0 <run>:
     be0:	2f 92       	push	r2
}
void run(int k){
     be2:	3f 92       	push	r3
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	7c 01       	movw	r14, r24
	unsigned char flag ;
	int count=0,count_flag=0;
	cli();
     c06:	f8 94       	cli
	init_motion();
     c08:	63 de       	rcall	.-826    	; 0x8d0 <init_motion>
	sei();
     c0a:	78 94       	sei
	Center_sensor=return_sensor(2);
	Right_sensor=return_sensor(1);
}
void run(int k){
	unsigned char flag ;
	int count=0,count_flag=0;
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
	init_motion();
	sei();
	while(1){
		sensor_value();
									//Prints Value of White Line Sensor3
	flag=0;
     c10:	51 2c       	mov	r5, r1
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c12:	0f 2e       	mov	r0, r31
     c14:	f8 e2       	ldi	r31, 0x28	; 40
     c16:	af 2e       	mov	r10, r31
     c18:	bb 24       	eor	r11, r11
     c1a:	b3 94       	inc	r11
     c1c:	f0 2d       	mov	r31, r0
     c1e:	1b e9       	ldi	r17, 0x9B	; 155
	OCR5BL = (unsigned char)right_motor;
     c20:	0f 2e       	mov	r0, r31
     c22:	fa e2       	ldi	r31, 0x2A	; 42
     c24:	cf 2e       	mov	r12, r31
     c26:	dd 24       	eor	r13, r13
     c28:	d3 94       	inc	r13
     c2a:	f0 2d       	mov	r31, r0
     c2c:	0f 2e       	mov	r0, r31
     c2e:	f1 e7       	ldi	r31, 0x71	; 113
     c30:	4f 2e       	mov	r4, r31
     c32:	f0 2d       	mov	r31, r0
		}
		sensor_value();
		if((Left_sensor<THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
		{                                             
			flag=1;                       
     c34:	01 e0       	ldi	r16, 0x01	; 1
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c36:	0f 2e       	mov	r0, r31
     c38:	f6 e7       	ldi	r31, 0x76	; 118
     c3a:	3f 2e       	mov	r3, r31
     c3c:	f0 2d       	mov	r31, r0
			velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
			stop();
		
		}
		sensor_value();
		count_flag=0;
     c3e:	81 2c       	mov	r8, r1
     c40:	91 2c       	mov	r9, r1
		if((Center_sensor>THRESHOLD && Left_sensor>THRESHOLD) || (Right_sensor>THRESHOLD && Center_sensor>THRESHOLD)||(Right_sensor>THRESHOLD && Center_sensor>THRESHOLD&&Left_sensor>THRESHOLD) )
		// if all blackline sensor are not within threshold limit
		{
			count_flag=1;
     c42:	66 24       	eor	r6, r6
     c44:	63 94       	inc	r6
	int count=0,count_flag=0;
	cli();
	init_motion();
	sei();
	while(1){
		sensor_value();
     c46:	71 2c       	mov	r7, r1
									//Prints Value of White Line Sensor3
	flag=0;
		sensor_value();
     c48:	be df       	rcall	.-132    	; 0xbc6 <sensor_value>
     c4a:	bd df       	rcall	.-134    	; 0xbc6 <sensor_value>
		if(Center_sensor>THRESHOLD)               // Is middle blackline is within threshold limit
     c4c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Center_sensor>
     c50:	80 36       	cpi	r24, 0x60	; 96
     c52:	08 f4       	brcc	.+2      	; 0xc56 <run+0x76>
		{
			flag=1;
			
			forward();      // Run robot at max velocity
     c54:	8a c0       	rjmp	.+276    	; 0xd6a <run+0x18a>
     c56:	6a dd       	rcall	.-1324   	; 0x72c <forward>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c58:	f5 01       	movw	r30, r10
	OCR5BL = (unsigned char)right_motor;
     c5a:	10 83       	st	Z, r17
			
			forward();      // Run robot at max velocity
			velocity(VELOCITY_MAX,VELOCITY_MAX);
		
		}
		sensor_value();
     c5c:	f6 01       	movw	r30, r12
     c5e:	10 83       	st	Z, r17
									//Prints Value of White Line Sensor3
	flag=0;
		sensor_value();
		if(Center_sensor>THRESHOLD)               // Is middle blackline is within threshold limit
		{
			flag=1;
     c60:	b2 df       	rcall	.-156    	; 0xbc6 <sensor_value>
     c62:	20 2e       	mov	r2, r16
		if((Left_sensor<THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
		{                                             
			flag=1;                       
			     // Run robot left wheel at max velocity and right wheel 
			forward();
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <run+0x92>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c66:	62 dd       	rcall	.-1340   	; 0x72c <forward>
     c68:	f5 01       	movw	r30, r10
	OCR5BL = (unsigned char)right_motor;
     c6a:	10 83       	st	Z, r17
     c6c:	f6 01       	movw	r30, r12
		}
		sensor_value();
		if((Left_sensor<THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
		{                                             
			flag=1;                       
     c6e:	40 82       	st	Z, r4
	        
		/*	velocity(VELOCITY_MIN,60);      // Run robot right wheel at max velocity and left wheel 
			lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
			lcd_print (2,5,VELOCITY_MAX,3);*/
		}
		sensor_value();
     c70:	20 2e       	mov	r2, r16
     c72:	a9 df       	rcall	.-174    	; 0xbc6 <sensor_value>
		if(Left_sensor>70 && Center_sensor >40 &&(flag==0)){
     c74:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <Left_sensor>
     c78:	87 34       	cpi	r24, 0x47	; 71
     c7a:	68 f0       	brcs	.+26     	; 0xc96 <run+0xb6>
     c7c:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Center_sensor>
     c80:	89 32       	cpi	r24, 0x29	; 41
     c82:	48 f0       	brcs	.+18     	; 0xc96 <run+0xb6>
     c84:	21 10       	cpse	r2, r1
			flag=1;
			forward();
     c86:	79 c0       	rjmp	.+242    	; 0xd7a <run+0x19a>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c88:	51 dd       	rcall	.-1374   	; 0x72c <forward>
     c8a:	f5 01       	movw	r30, r10
	OCR5BL = (unsigned char)right_motor;
     c8c:	40 82       	st	Z, r4
     c8e:	f6 01       	movw	r30, r12
			lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
			lcd_print (2,5,VELOCITY_MAX,3);*/
		}
		sensor_value();
		if(Left_sensor>70 && Center_sensor >40 &&(flag==0)){
			flag=1;
     c90:	10 83       	st	Z, r17
			forward();
			velocity(VELOCITY_MIN,VELOCITY_MAX);
		}
		sensor_value();
     c92:	20 2e       	mov	r2, r16
     c94:	72 c0       	rjmp	.+228    	; 0xd7a <run+0x19a>
		if((Right_sensor<THRESHOLD) && (flag==0)) // Is right blackline is not within threshold limit
     c96:	97 df       	rcall	.-210    	; 0xbc6 <sensor_value>
     c98:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Right_sensor>
     c9c:	8f 35       	cpi	r24, 0x5F	; 95
     c9e:	40 f4       	brcc	.+16     	; 0xcb0 <run+0xd0>
		//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right blackline is not within threshold limit
		{
			flag=1;    
			     // Run robot right wheel at max velocity and left wheel 
			forward();
     ca0:	21 10       	cpse	r2, r1
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <run+0xd0>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ca4:	43 dd       	rcall	.-1402   	; 0x72c <forward>
     ca6:	f5 01       	movw	r30, r10
	OCR5BL = (unsigned char)right_motor;
     ca8:	30 82       	st	Z, r3
     caa:	f6 01       	movw	r30, r12
		}
		sensor_value();
		if((Right_sensor<THRESHOLD) && (flag==0)) // Is right blackline is not within threshold limit
		//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right blackline is not within threshold limit
		{
			flag=1;    
     cac:	10 83       	st	Z, r17
			
		/*	velocity(60,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
			lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
			lcd_print (2,5,VELOCITY_MIN,3);*/
		}
		sensor_value();
     cae:	20 2e       	mov	r2, r16
		if(Right_sensor>70 && Center_sensor >40 &&(flag==0)){
     cb0:	8a df       	rcall	.-236    	; 0xbc6 <sensor_value>
     cb2:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Right_sensor>
     cb6:	87 34       	cpi	r24, 0x47	; 71
     cb8:	60 f0       	brcs	.+24     	; 0xcd2 <run+0xf2>
     cba:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Center_sensor>
     cbe:	89 32       	cpi	r24, 0x29	; 41
     cc0:	40 f0       	brcs	.+16     	; 0xcd2 <run+0xf2>
			flag=1;
			forward();
     cc2:	21 10       	cpse	r2, r1
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <run+0xf2>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cc6:	32 dd       	rcall	.-1436   	; 0x72c <forward>
     cc8:	f5 01       	movw	r30, r10
	OCR5BL = (unsigned char)right_motor;
     cca:	10 83       	st	Z, r17
     ccc:	f6 01       	movw	r30, r12
			lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
			lcd_print (2,5,VELOCITY_MIN,3);*/
		}
		sensor_value();
		if(Right_sensor>70 && Center_sensor >40 &&(flag==0)){
			flag=1;
     cce:	40 82       	st	Z, r4
			forward();
			velocity(VELOCITY_MAX,VELOCITY_MIN);
		}
		sensor_value();
     cd0:	20 2e       	mov	r2, r16
     cd2:	79 df       	rcall	.-270    	; 0xbc6 <sensor_value>
		if(Center_sensor<THRESHOLD && Left_sensor<THRESHOLD && Right_sensor<THRESHOLD && flag==0 )
     cd4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Center_sensor>
     cd8:	8f 35       	cpi	r24, 0x5F	; 95
     cda:	78 f4       	brcc	.+30     	; 0xcfa <run+0x11a>
     cdc:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <Left_sensor>
     ce0:	8f 35       	cpi	r24, 0x5F	; 95
     ce2:	58 f4       	brcc	.+22     	; 0xcfa <run+0x11a>
     ce4:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Right_sensor>
     ce8:	8f 35       	cpi	r24, 0x5F	; 95
     cea:	38 f4       	brcc	.+14     	; 0xcfa <run+0x11a>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cec:	21 10       	cpse	r2, r1
	OCR5BL = (unsigned char)right_motor;
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <run+0x11a>
     cf0:	f5 01       	movw	r30, r10
		if(Center_sensor<THRESHOLD && Left_sensor<THRESHOLD && Right_sensor<THRESHOLD && flag==0 )
		// if all blackline sensor are not within threshold limit
		{
			flag=1;
			velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
			stop();
     cf2:	10 82       	st	Z, r1
     cf4:	f6 01       	movw	r30, r12
		
		}
		sensor_value();
     cf6:	10 82       	st	Z, r1
     cf8:	22 dd       	rcall	.-1468   	; 0x73e <stop>
		count_flag=0;
		if((Center_sensor>THRESHOLD && Left_sensor>THRESHOLD) || (Right_sensor>THRESHOLD && Center_sensor>THRESHOLD)||(Right_sensor>THRESHOLD && Center_sensor>THRESHOLD&&Left_sensor>THRESHOLD) )
     cfa:	65 df       	rcall	.-310    	; 0xbc6 <sensor_value>
     cfc:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Center_sensor>
     d00:	80 36       	cpi	r24, 0x60	; 96
     d02:	88 f0       	brcs	.+34     	; 0xd26 <run+0x146>
     d04:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <Left_sensor>
     d08:	80 36       	cpi	r24, 0x60	; 96
		// if all blackline sensor are not within threshold limit
		{
			count_flag=1;
			sensor_value();
     d0a:	c8 f1       	brcs	.+114    	; 0xd7e <run+0x19e>
     d0c:	5c df       	rcall	.-328    	; 0xbc6 <sensor_value>
     d0e:	ff ef       	ldi	r31, 0xFF	; 255
     d10:	2f e7       	ldi	r18, 0x7F	; 127
     d12:	8d e0       	ldi	r24, 0x0D	; 13
     d14:	f1 50       	subi	r31, 0x01	; 1
     d16:	20 40       	sbci	r18, 0x00	; 0
     d18:	80 40       	sbci	r24, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <run+0x134>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <run+0x13e>
		sensor_value();
		count_flag=0;
		if((Center_sensor>THRESHOLD && Left_sensor>THRESHOLD) || (Right_sensor>THRESHOLD && Center_sensor>THRESHOLD)||(Right_sensor>THRESHOLD && Center_sensor>THRESHOLD&&Left_sensor>THRESHOLD) )
		// if all blackline sensor are not within threshold limit
		{
			count_flag=1;
     d1e:	00 00       	nop
     d20:	86 2d       	mov	r24, r6
     d22:	97 2d       	mov	r25, r7
			velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
			stop();
		
		}
		sensor_value();
		count_flag=0;
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <run+0x14a>
     d26:	88 2d       	mov	r24, r8
		{
			count_flag=1;
			sensor_value();
			_delay_ms(300);
		}
		count=count_flag+count;
     d28:	99 2d       	mov	r25, r9
     d2a:	c8 0f       	add	r28, r24
		lcd_print(2,10,count,2);
     d2c:	d9 1f       	adc	r29, r25
     d2e:	22 e0       	ldi	r18, 0x02	; 2
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	ae 01       	movw	r20, r28
     d34:	6a e0       	ldi	r22, 0x0A	; 10
     d36:	82 e0       	ldi	r24, 0x02	; 2
		if(count==k){
     d38:	e4 da       	rcall	.-2616   	; 0x302 <lcd_print>
     d3a:	ce 15       	cp	r28, r14
     d3c:	df 05       	cpc	r29, r15
     d3e:	09 f0       	breq	.+2      	; 0xd42 <run+0x162>
     d40:	83 cf       	rjmp	.-250    	; 0xc48 <run+0x68>
     d42:	9f ef       	ldi	r25, 0xFF	; 255
     d44:	ef e7       	ldi	r30, 0x7F	; 127
     d46:	fd e0       	ldi	r31, 0x0D	; 13
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	e0 40       	sbci	r30, 0x00	; 0
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <run+0x168>
		count=0;
		
		_delay_ms(300);
		stop();
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <run+0x172>
     d52:	00 00       	nop
     d54:	f4 dc       	rcall	.-1560   	; 0x73e <stop>
     d56:	2f ef       	ldi	r18, 0xFF	; 255
     d58:	8f e7       	ldi	r24, 0x7F	; 127
     d5a:	96 e1       	ldi	r25, 0x16	; 22
     d5c:	21 50       	subi	r18, 0x01	; 1
     d5e:	80 40       	sbci	r24, 0x00	; 0
     d60:	90 40       	sbci	r25, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <run+0x17c>
		stop();
		_delay_ms(200);*/
	}
		
	}
}
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <run+0x186>
			
			forward();      // Run robot at max velocity
			velocity(VELOCITY_MAX,VELOCITY_MAX);
		
		}
		sensor_value();
     d66:	00 00       	nop
     d68:	12 c0       	rjmp	.+36     	; 0xd8e <run+0x1ae>
		if((Left_sensor<THRESHOLD) && (flag==0))  // Is left blackline is not within threshold limit
     d6a:	2d df       	rcall	.-422    	; 0xbc6 <sensor_value>
     d6c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <Left_sensor>
     d70:	8f 35       	cpi	r24, 0x5F	; 95
     d72:	08 f4       	brcc	.+2      	; 0xd76 <run+0x196>
	init_motion();
	sei();
	while(1){
		sensor_value();
									//Prints Value of White Line Sensor3
	flag=0;
     d74:	78 cf       	rjmp	.-272    	; 0xc66 <run+0x86>
     d76:	25 2c       	mov	r2, r5
		if(Left_sensor>70 && Center_sensor >40 &&(flag==0)){
			flag=1;
			forward();
			velocity(VELOCITY_MIN,VELOCITY_MAX);
		}
		sensor_value();
     d78:	7c cf       	rjmp	.-264    	; 0xc72 <run+0x92>
     d7a:	25 df       	rcall	.-438    	; 0xbc6 <sensor_value>
     d7c:	99 cf       	rjmp	.-206    	; 0xcb0 <run+0xd0>
			stop();
		
		}
		sensor_value();
		count_flag=0;
		if((Center_sensor>THRESHOLD && Left_sensor>THRESHOLD) || (Right_sensor>THRESHOLD && Center_sensor>THRESHOLD)||(Right_sensor>THRESHOLD && Center_sensor>THRESHOLD&&Left_sensor>THRESHOLD) )
     d7e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <Right_sensor>
     d82:	80 36       	cpi	r24, 0x60	; 96
     d84:	08 f0       	brcs	.+2      	; 0xd88 <run+0x1a8>
     d86:	c2 cf       	rjmp	.-124    	; 0xd0c <run+0x12c>
			velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
			stop();
		
		}
		sensor_value();
		count_flag=0;
     d88:	88 2d       	mov	r24, r8
     d8a:	99 2d       	mov	r25, r9
     d8c:	ce cf       	rjmp	.-100    	; 0xd2a <run+0x14a>
		stop();
		_delay_ms(200);*/
	}
		
	}
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	7f 90       	pop	r7
     da8:	6f 90       	pop	r6
     daa:	5f 90       	pop	r5
     dac:	4f 90       	pop	r4
     dae:	3f 90       	pop	r3
     db0:	2f 90       	pop	r2
     db2:	08 95       	ret

00000db4 <decode>:


char * decode(int x){

	switch(x){
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	89 31       	cpi	r24, 0x19	; 25
     db8:	91 05       	cpc	r25, r1
     dba:	08 f0       	brcs	.+2      	; 0xdbe <decode+0xa>
     dbc:	4c c0       	rjmp	.+152    	; 0xe56 <decode+0xa2>
     dbe:	fc 01       	movw	r30, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	ee 58       	subi	r30, 0x8E	; 142
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__tablejump2__>
		case 1:
		return "B1" ;
		case 2:
		return "C1";
     dcc:	25 e0       	ldi	r18, 0x05	; 5
     dce:	32 e0       	ldi	r19, 0x02	; 2
     dd0:	48 c0       	rjmp	.+144    	; 0xe62 <decode+0xae>
		case 3:
		return "D1";
		case 4:
		return "E1";
     dd2:	2b e0       	ldi	r18, 0x0B	; 11
     dd4:	32 e0       	ldi	r19, 0x02	; 2
     dd6:	45 c0       	rjmp	.+138    	; 0xe62 <decode+0xae>
		case 5:
		return "F1";
     dd8:	2e e0       	ldi	r18, 0x0E	; 14
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	42 c0       	rjmp	.+132    	; 0xe62 <decode+0xae>
		case 6:
		return "B2";
     dde:	21 e1       	ldi	r18, 0x11	; 17
     de0:	32 e0       	ldi	r19, 0x02	; 2
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <decode+0xae>
		case 7:
		return "C2";
     de4:	24 e1       	ldi	r18, 0x14	; 20
     de6:	32 e0       	ldi	r19, 0x02	; 2
     de8:	3c c0       	rjmp	.+120    	; 0xe62 <decode+0xae>

		case 8:
		return "D2";
     dea:	27 e1       	ldi	r18, 0x17	; 23
     dec:	32 e0       	ldi	r19, 0x02	; 2
     dee:	39 c0       	rjmp	.+114    	; 0xe62 <decode+0xae>
		case 9:
		return "E2";
     df0:	2a e1       	ldi	r18, 0x1A	; 26
     df2:	32 e0       	ldi	r19, 0x02	; 2
     df4:	36 c0       	rjmp	.+108    	; 0xe62 <decode+0xae>


		case 10:
		return "F2";
     df6:	2d e1       	ldi	r18, 0x1D	; 29
     df8:	32 e0       	ldi	r19, 0x02	; 2
     dfa:	33 c0       	rjmp	.+102    	; 0xe62 <decode+0xae>

		case 11:
		return "B3";
     dfc:	20 e2       	ldi	r18, 0x20	; 32
     dfe:	32 e0       	ldi	r19, 0x02	; 2
     e00:	30 c0       	rjmp	.+96     	; 0xe62 <decode+0xae>
		case 12:
		return "C3";
     e02:	23 e2       	ldi	r18, 0x23	; 35
     e04:	32 e0       	ldi	r19, 0x02	; 2
     e06:	2d c0       	rjmp	.+90     	; 0xe62 <decode+0xae>
		case 13:
		return "D3";
     e08:	26 e2       	ldi	r18, 0x26	; 38
     e0a:	32 e0       	ldi	r19, 0x02	; 2
     e0c:	2a c0       	rjmp	.+84     	; 0xe62 <decode+0xae>
		case 14:
		return "E3";
     e0e:	29 e2       	ldi	r18, 0x29	; 41
     e10:	32 e0       	ldi	r19, 0x02	; 2
     e12:	27 c0       	rjmp	.+78     	; 0xe62 <decode+0xae>
		case 15:
		return "F3";
     e14:	2c e2       	ldi	r18, 0x2C	; 44
     e16:	32 e0       	ldi	r19, 0x02	; 2
     e18:	24 c0       	rjmp	.+72     	; 0xe62 <decode+0xae>
		case 16:
		return "B4";
     e1a:	2f e2       	ldi	r18, 0x2F	; 47
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	21 c0       	rjmp	.+66     	; 0xe62 <decode+0xae>

		case 17:
		return "C4";
     e20:	22 e3       	ldi	r18, 0x32	; 50
     e22:	32 e0       	ldi	r19, 0x02	; 2
     e24:	1e c0       	rjmp	.+60     	; 0xe62 <decode+0xae>
		case 18:
		return "D4";
     e26:	25 e3       	ldi	r18, 0x35	; 53
     e28:	32 e0       	ldi	r19, 0x02	; 2
     e2a:	1b c0       	rjmp	.+54     	; 0xe62 <decode+0xae>
		case 19:
		return "E4";
     e2c:	28 e3       	ldi	r18, 0x38	; 56
     e2e:	32 e0       	ldi	r19, 0x02	; 2
     e30:	18 c0       	rjmp	.+48     	; 0xe62 <decode+0xae>
		case 20:
		return "F4";
     e32:	2b e3       	ldi	r18, 0x3B	; 59
     e34:	32 e0       	ldi	r19, 0x02	; 2
     e36:	15 c0       	rjmp	.+42     	; 0xe62 <decode+0xae>
		case 21:
		return "B5";
     e38:	2e e3       	ldi	r18, 0x3E	; 62
     e3a:	32 e0       	ldi	r19, 0x02	; 2
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <decode+0xae>

		case 22:
		return "C5";
     e3e:	21 e4       	ldi	r18, 0x41	; 65
     e40:	32 e0       	ldi	r19, 0x02	; 2
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <decode+0xae>
		case 23:
		return "D5";
     e44:	24 e4       	ldi	r18, 0x44	; 68
     e46:	32 e0       	ldi	r19, 0x02	; 2
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <decode+0xae>
		case 24:
		return "E5";
     e4a:	27 e4       	ldi	r18, 0x47	; 71
     e4c:	32 e0       	ldi	r19, 0x02	; 2
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <decode+0xae>
		case 25:
		return "F5";
     e50:	2a e4       	ldi	r18, 0x4A	; 74
     e52:	32 e0       	ldi	r19, 0x02	; 2
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <decode+0xae>
	}
}
     e56:	08 95       	ret

char * decode(int x){

	switch(x){
		case 1:
		return "B1" ;
     e58:	22 e0       	ldi	r18, 0x02	; 2
     e5a:	32 e0       	ldi	r19, 0x02	; 2
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <decode+0xae>
		case 2:
		return "C1";
		case 3:
		return "D1";
     e5e:	28 e0       	ldi	r18, 0x08	; 8
     e60:	32 e0       	ldi	r19, 0x02	; 2
     e62:	82 2f       	mov	r24, r18
     e64:	93 2f       	mov	r25, r19
		case 24:
		return "E5";
		case 25:
		return "F5";
	}
}
     e66:	08 95       	ret

00000e68 <traverse>:

char habitat_node[100]="",animal[100]="";

int N=1,S=0,E=0,W=0;

void traverse(char A,char B,char C,char D){
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	08 2f       	mov	r16, r24
     e76:	c6 2f       	mov	r28, r22
     e78:	f4 2e       	mov	r15, r20
     e7a:	e2 2e       	mov	r14, r18
	int route[2];
	int i=0,j=0;

	j=0;
	cli();
     e7c:	f8 94       	cli
	lcd_set_4bit();
     e7e:	79 d9       	rcall	.-3342   	; 0x172 <lcd_set_4bit>
	lcd_init();
     e80:	df d9       	rcall	.-3138   	; 0x240 <lcd_init>
     e82:	78 94       	sei
	
	sei();
     e84:	10 e0       	ldi	r17, 0x00	; 0

		route[0]=A-C;
     e86:	0f 19       	sub	r16, r15
     e88:	11 09       	sbc	r17, r1
     e8a:	d0 e0       	ldi	r29, 0x00	; 0
		route[1]=B-D;
     e8c:	ce 19       	sub	r28, r14
     e8e:	d1 09       	sbc	r29, r1
     e90:	11 23       	and	r17, r17
	/*/route[0]=-2;
	route[1]=0;
	
	j=0;*/
	
	if(route[0]<0){
     e92:	0c f0       	brlt	.+2      	; 0xe96 <traverse+0x2e>
     e94:	6e c0       	rjmp	.+220    	; 0xf72 <traverse+0x10a>
     e96:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
		/**********rotate to east***************/
			if(N==1){
     e9a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	b1 f4       	brne	.+44     	; 0xece <traverse+0x66>
     ea2:	88 e5       	ldi	r24, 0x58	; 88
				right_degrees(88);
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0b dd       	rcall	.-1514   	; 0x8be <right_degrees>
     ea8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				N=0;
     eac:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
				E=1;
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
     eb8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
     ebc:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
				S=0;
     ec0:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     ec4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
				W=0;
     ec8:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
     ecc:	c6 c0       	rjmp	.+396    	; 0x105a <traverse+0x1f2>
     ece:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
				}
				else{
					if(E==1){
     ed2:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	99 f4       	brne	.+38     	; 0xf00 <traverse+0x98>
     eda:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
					
					N=0;
     ede:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
					E=1;
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
     eea:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
     eee:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
					S=0;
     ef2:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     ef6:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
					W=0;
     efa:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
     efe:	ad c0       	rjmp	.+346    	; 0x105a <traverse+0x1f2>
     f00:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
					}
					else{
						if (S==1)
     f04:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	b1 f4       	brne	.+44     	; 0xf38 <traverse+0xd0>
						{
						left_degrees(88);
     f0c:	88 e5       	ldi	r24, 0x58	; 88
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	cd dc       	rcall	.-1638   	; 0x8ac <left_degrees>
     f12:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						N=0;
     f16:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
						E=1;
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
     f22:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
     f26:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
						S=0;
     f2a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     f2e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
						W=0;
     f32:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
     f36:	91 c0       	rjmp	.+290    	; 0x105a <traverse+0x1f2>
     f38:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
						}
							else{
							if (W==1)
     f3c:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	09 f0       	breq	.+2      	; 0xf46 <traverse+0xde>
     f44:	8a c0       	rjmp	.+276    	; 0x105a <traverse+0x1f2>
							{
							right_degrees(181);
     f46:	85 eb       	ldi	r24, 0xB5	; 181
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	b9 dc       	rcall	.-1678   	; 0x8be <right_degrees>
     f4c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
							N=0;
     f50:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     f54:	81 e0       	ldi	r24, 0x01	; 1
							E=1;
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
     f5c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
     f60:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
							S=0;
     f64:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     f68:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
							W=0;
     f6c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
     f70:	74 c0       	rjmp	.+232    	; 0x105a <traverse+0x1f2>
     f72:	10 16       	cp	r1, r16
		S=0;
		E=1;
		W=0;
		printf("  Rotate to East  ");*/
		}
		else if(route[0]>0){
     f74:	11 06       	cpc	r1, r17
     f76:	0c f0       	brlt	.+2      	; 0xf7a <traverse+0x112>
     f78:	6d c0       	rjmp	.+218    	; 0x1054 <traverse+0x1ec>
     f7a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
			/***********************rotate to west*************************/
			if(N==1){
     f7e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	b1 f4       	brne	.+44     	; 0xfb2 <traverse+0x14a>
				left_degrees(88);
     f86:	88 e5       	ldi	r24, 0x58	; 88
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	90 dc       	rcall	.-1760   	; 0x8ac <left_degrees>
     f8c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				N=0;
     f90:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     f94:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
				E=0;
     f98:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
     f9c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
				S=0;
     fa0:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
				W=1;
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
     fac:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
     fb0:	54 c0       	rjmp	.+168    	; 0x105a <traverse+0x1f2>
     fb2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
			}
			else{
				if(E==1){
     fb6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	b1 f4       	brne	.+44     	; 0xfea <traverse+0x182>
					right_degrees(181);
     fbe:	85 eb       	ldi	r24, 0xB5	; 181
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	7d dc       	rcall	.-1798   	; 0x8be <right_degrees>
     fc4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
					N=0;
     fc8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
     fcc:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
					E=0;
     fd0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
     fd4:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
					S=0;
     fd8:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
					W=1;
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
     fe4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
     fe8:	38 c0       	rjmp	.+112    	; 0x105a <traverse+0x1f2>
     fea:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
				}
				else{
					if (S==1)
     fee:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	b1 f4       	brne	.+44     	; 0x1022 <traverse+0x1ba>
					{
						right_degrees(88);
     ff6:	88 e5       	ldi	r24, 0x58	; 88
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	61 dc       	rcall	.-1854   	; 0x8be <right_degrees>
     ffc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						N=0;
    1000:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1004:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    1008:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    100c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
						S=0;
    1010:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    1014:	81 e0       	ldi	r24, 0x01	; 1
						W=1;
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    101c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    1020:	1c c0       	rjmp	.+56     	; 0x105a <traverse+0x1f2>
    1022:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
					}
					else{
						if (W==1)
    1026:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	b1 f4       	brne	.+44     	; 0x105a <traverse+0x1f2>
    102e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						{
							N=0;
    1032:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1036:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
							E=0;
    103a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    103e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
							S=0;
    1042:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    1046:	81 e0       	ldi	r24, 0x01	; 1
							W=1;
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    104e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    1052:	03 c0       	rjmp	.+6      	; 0x105a <traverse+0x1f2>
    1054:	01 15       	cp	r16, r1
		E=0;
		W=1;
		printf("  Rotate to West  ");*/
			}
	/*****************Special section**************************/
	if(abs(route[0])!=0){
    1056:	11 05       	cpc	r17, r1
    1058:	41 f0       	breq	.+16     	; 0x106a <traverse+0x202>
		run(abs(route[0]));
    105a:	c8 01       	movw	r24, r16
    105c:	99 23       	and	r25, r25
    105e:	24 f4       	brge	.+8      	; 0x1068 <traverse+0x200>
    1060:	88 27       	eor	r24, r24
    1062:	99 27       	eor	r25, r25
    1064:	80 1b       	sub	r24, r16
    1066:	91 0b       	sbc	r25, r17
    1068:	bb dd       	rcall	.-1162   	; 0xbe0 <run>
    106a:	dd 23       	and	r29, r29
	}
	/******************************************/
	if(route[1]<0){
    106c:	0c f0       	brlt	.+2      	; 0x1070 <traverse+0x208>
    106e:	68 c0       	rjmp	.+208    	; 0x1140 <traverse+0x2d8>
    1070:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
		/****************NORTH***************************/
		if(N==1){
    1074:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	69 f4       	brne	.+26     	; 0x1096 <traverse+0x22e>
    107c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
			N=1;
			E=0;
    1080:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    1084:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
			S=0;
    1088:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    108c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
			W=0;
    1090:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1094:	c8 c0       	rjmp	.+400    	; 0x1226 <traverse+0x3be>
		}
		else{
			if(E==1){
    1096:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    109a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	b1 f4       	brne	.+44     	; 0x10ce <traverse+0x266>
				left_degrees(88);
    10a2:	88 e5       	ldi	r24, 0x58	; 88
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 dc       	rcall	.-2044   	; 0x8ac <left_degrees>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
				N=1;
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    10b0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
    10b4:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
				E=0;
    10b8:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    10bc:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
				S=0;
    10c0:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    10c4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
				W=0;
    10c8:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    10cc:	ac c0       	rjmp	.+344    	; 0x1226 <traverse+0x3be>
			}
			else{
				if (S==1)
    10ce:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    10d2:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	b1 f4       	brne	.+44     	; 0x1106 <traverse+0x29e>
				{
					right_degrees(181);
    10da:	85 eb       	ldi	r24, 0xB5	; 181
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	ef db       	rcall	.-2082   	; 0x8be <right_degrees>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
					N=1;
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    10e8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
    10ec:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
					E=0;
    10f0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    10f4:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
					S=0;
    10f8:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    10fc:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
					W=0;
    1100:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1104:	90 c0       	rjmp	.+288    	; 0x1226 <traverse+0x3be>
				}
				else{
					if (W==1)
    1106:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    110a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	09 f0       	breq	.+2      	; 0x1114 <traverse+0x2ac>
    1112:	89 c0       	rjmp	.+274    	; 0x1226 <traverse+0x3be>
					{	
						right_degrees(88);
    1114:	88 e5       	ldi	r24, 0x58	; 88
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	d2 db       	rcall	.-2140   	; 0x8be <right_degrees>
    111a:	81 e0       	ldi	r24, 0x01	; 1
						N=1;
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    1122:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
    1126:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    112a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    112e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
						S=0;
    1132:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    1136:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
						W=0;
    113a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    113e:	73 c0       	rjmp	.+230    	; 0x1226 <traverse+0x3be>
    1140:	1c 16       	cp	r1, r28
				
			}
			
		}
		
		}else if(route[1]>0){
    1142:	1d 06       	cpc	r1, r29
    1144:	0c f0       	brlt	.+2      	; 0x1148 <traverse+0x2e0>
    1146:	6d c0       	rjmp	.+218    	; 0x1222 <traverse+0x3ba>
			/*****************south************************************/
		if(N==1){
    1148:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
    114c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	b1 f4       	brne	.+44     	; 0x1180 <traverse+0x318>
			left_degrees(181);
    1154:	85 eb       	ldi	r24, 0xB5	; 181
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 db       	rcall	.-2222   	; 0x8ac <left_degrees>
    115a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
			N=0;
    115e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1162:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
			E=0;
    1166:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    116a:	81 e0       	ldi	r24, 0x01	; 1
			S=1;
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    1172:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
    1176:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
			W=0;
    117a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    117e:	53 c0       	rjmp	.+166    	; 0x1226 <traverse+0x3be>
		}
		else{
			if(E==1){
    1180:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    1184:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	b1 f4       	brne	.+44     	; 0x11b8 <traverse+0x350>
				right_degrees(88);
    118c:	88 e5       	ldi	r24, 0x58	; 88
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	96 db       	rcall	.-2260   	; 0x8be <right_degrees>
    1192:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				N=0;
    1196:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    119a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
				E=0;
    119e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
				S=1;
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    11aa:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
    11ae:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
				W=0;
    11b2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    11b6:	37 c0       	rjmp	.+110    	; 0x1226 <traverse+0x3be>
    11b8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
			}
			else{
				if (S==1)
    11bc:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	99 f4       	brne	.+38     	; 0x11ea <traverse+0x382>
    11c4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				{
					
					N=0;
    11c8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    11cc:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
					E=0;
    11d0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
					S=1;
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    11dc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
					W=0;
    11e0:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    11e4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    11e8:	1e c0       	rjmp	.+60     	; 0x1226 <traverse+0x3be>
				}
				else{
					if (W==1)
    11ea:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    11ee:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	c1 f4       	brne	.+48     	; 0x1226 <traverse+0x3be>
					{
						left_degrees(88);
    11f6:	88 e5       	ldi	r24, 0x58	; 88
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	58 db       	rcall	.-2384   	; 0x8ac <left_degrees>
    11fc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						N=0;
    1200:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1204:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    1208:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    120c:	81 e0       	ldi	r24, 0x01	; 1
						S=1;
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    1214:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
						W=0;
    1218:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    121c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <traverse+0x3be>
			}
			
		}
	}
	/***********************Special section**********************************/
	if (abs(route[1])!=0)
    1222:	20 97       	sbiw	r28, 0x00	; 0
    1224:	41 f0       	breq	.+16     	; 0x1236 <traverse+0x3ce>
	{
		run(abs(route[1]));
    1226:	ce 01       	movw	r24, r28
    1228:	dd 23       	and	r29, r29
    122a:	24 f4       	brge	.+8      	; 0x1234 <traverse+0x3cc>
    122c:	88 27       	eor	r24, r24
    122e:	99 27       	eor	r25, r25
    1230:	8c 1b       	sub	r24, r28
    1232:	9d 0b       	sbc	r25, r29
    1234:	d5 dc       	rcall	.-1622   	; 0xbe0 <run>
    1236:	ce eb       	ldi	r28, 0xBE	; 190
	}
	
	/*************************************************************/
	
	if((C=='B'||C=='C'||C=='D'||C=='E')&&(D=='1')){
    1238:	cf 0d       	add	r28, r15
    123a:	c4 30       	cpi	r28, 0x04	; 4
    123c:	08 f0       	brcs	.+2      	; 0x1240 <traverse+0x3d8>
    123e:	9f c3       	rjmp	.+1854   	; 0x197e <traverse+0xb16>
    1240:	81 e3       	ldi	r24, 0x31	; 49
    1242:	e8 12       	cpse	r14, r24
    1244:	96 c3       	rjmp	.+1836   	; 0x1972 <traverse+0xb0a>
		/**************************WEST***********************************/
		if(N==1){
    1246:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
    124a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	b1 f4       	brne	.+44     	; 0x127e <traverse+0x416>
			left_degrees(88);
    1252:	88 e5       	ldi	r24, 0x58	; 88
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	2a db       	rcall	.-2476   	; 0x8ac <left_degrees>
    1258:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
			N=0;
    125c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1260:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
			E=0;
    1264:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    1268:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
			S=0;
    126c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
			W=1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    1278:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    127c:	9e c1       	rjmp	.+828    	; 0x15ba <traverse+0x752>
		}
		else{
			if(E==1){
    127e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    1282:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	b1 f4       	brne	.+44     	; 0x12b6 <traverse+0x44e>
				left_degrees(181);
    128a:	85 eb       	ldi	r24, 0xB5	; 181
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e db       	rcall	.-2532   	; 0x8ac <left_degrees>
    1290:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				N=0;
    1294:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1298:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
				E=0;
    129c:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    12a0:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
				S=0;
    12a4:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
				W=1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    12b0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    12b4:	82 c1       	rjmp	.+772    	; 0x15ba <traverse+0x752>
			}
			else{
				if (S==1)
    12b6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    12ba:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	b1 f4       	brne	.+44     	; 0x12ee <traverse+0x486>
				{
					right_degrees(88);
    12c2:	88 e5       	ldi	r24, 0x58	; 88
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	fb da       	rcall	.-2570   	; 0x8be <right_degrees>
    12c8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
					N=0;
    12cc:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    12d0:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
					E=0;
    12d4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    12d8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
					S=0;
    12dc:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
					W=1;
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    12e8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    12ec:	66 c1       	rjmp	.+716    	; 0x15ba <traverse+0x752>
    12ee:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
				}
				else{
					if (W==1)
    12f2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	09 f0       	breq	.+2      	; 0x12fc <traverse+0x494>
    12fa:	5f c1       	rjmp	.+702    	; 0x15ba <traverse+0x752>
    12fc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
					{
						N=0;
    1300:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1304:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    1308:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    130c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
						S=0;
    1310:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
						W=1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <W+0x1>
    131c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <W>
    1320:	4c c1       	rjmp	.+664    	; 0x15ba <traverse+0x752>
			}
			
		}

	}
	if((D=='2'||D=='3'||D=='4'||D=='5')&&(C=='F')){
    1322:	86 e4       	ldi	r24, 0x46	; 70
    1324:	f8 12       	cpse	r15, r24
    1326:	6e c0       	rjmp	.+220    	; 0x1404 <traverse+0x59c>
			/******************************SOUTH*********************************/
		if(N==1){
    1328:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
    132c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	b1 f4       	brne	.+44     	; 0x1360 <traverse+0x4f8>
			left_degrees(181);
    1334:	85 eb       	ldi	r24, 0xB5	; 181
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	b9 da       	rcall	.-2702   	; 0x8ac <left_degrees>
    133a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
			N=0;
    133e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    1342:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
			E=0;
    1346:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
			S=1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    1352:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
			W=0;
    1356:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    135a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    135e:	bb c0       	rjmp	.+374    	; 0x14d6 <traverse+0x66e>
		}
		else{
			if(E==1){
    1360:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    1364:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	b1 f4       	brne	.+44     	; 0x1398 <traverse+0x530>
				right_degrees(181);
    136c:	85 eb       	ldi	r24, 0xB5	; 181
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a6 da       	rcall	.-2740   	; 0x8be <right_degrees>
    1372:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				N=0;
    1376:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    137a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
				E=0;
    137e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    1382:	81 e0       	ldi	r24, 0x01	; 1
				S=1;
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    138a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
    138e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
				W=0;
    1392:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1396:	9f c0       	rjmp	.+318    	; 0x14d6 <traverse+0x66e>
    1398:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
			}
			else{
				if (S==1)
    139c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	99 f4       	brne	.+38     	; 0x13ca <traverse+0x562>
    13a4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				{
					
					N=0;
    13a8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    13ac:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
					E=0;
    13b0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
					S=1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    13bc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
					W=0;
    13c0:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    13c4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    13c8:	86 c0       	rjmp	.+268    	; 0x14d6 <traverse+0x66e>
				}
				else{
					if (W==1)
    13ca:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    13ce:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <traverse+0x570>
    13d6:	7f c0       	rjmp	.+254    	; 0x14d6 <traverse+0x66e>
					{
						left_degrees(88);
    13d8:	88 e5       	ldi	r24, 0x58	; 88
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	67 da       	rcall	.-2866   	; 0x8ac <left_degrees>
    13de:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						N=0;
    13e2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    13e6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    13ea:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
						S=1;
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <S+0x1>
    13f6:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <S>
    13fa:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
						W=0;
    13fe:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1402:	69 c0       	rjmp	.+210    	; 0x14d6 <traverse+0x66e>
    1404:	81 e4       	ldi	r24, 0x41	; 65
			}
			
		}

	}
	if((D=='2'||D=='3'||D=='4'||D=='5')&&(C=='A')){
    1406:	f8 12       	cpse	r15, r24
    1408:	66 c0       	rjmp	.+204    	; 0x14d6 <traverse+0x66e>
    140a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
		/***********************NORTh***************************************/
		if(N==1){
    140e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	69 f4       	brne	.+26     	; 0x1430 <traverse+0x5c8>
			N=1;
			E=0;
    1416:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
    141a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
			S=0;
    141e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    1422:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
			W=0;
    1426:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    142a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    142e:	53 c0       	rjmp	.+166    	; 0x14d6 <traverse+0x66e>
		}
		else{
			if(E==1){
    1430:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    1434:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	b1 f4       	brne	.+44     	; 0x1468 <traverse+0x600>
				left_degrees(88);
    143c:	88 e5       	ldi	r24, 0x58	; 88
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	35 da       	rcall	.-2966   	; 0x8ac <left_degrees>
    1442:	81 e0       	ldi	r24, 0x01	; 1
				N=1;
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    144a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
				E=0;
    144e:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
    1452:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
				S=0;
    1456:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    145a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
				W=0;
    145e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    1462:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1466:	37 c0       	rjmp	.+110    	; 0x14d6 <traverse+0x66e>
			}
			else{
				if (S==1)
    1468:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    146c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	b1 f4       	brne	.+44     	; 0x14a0 <traverse+0x638>
				{
					right_degrees(181);
    1474:	85 eb       	ldi	r24, 0xB5	; 181
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	22 da       	rcall	.-3004   	; 0x8be <right_degrees>
    147a:	81 e0       	ldi	r24, 0x01	; 1
					N=1;
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    1482:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
					E=0;
    1486:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
    148a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
					S=0;
    148e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    1492:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
					W=0;
    1496:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    149a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <traverse+0x66e>
				}
				else{
					if (W==1)
    14a0:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    14a4:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	a9 f4       	brne	.+42     	; 0x14d6 <traverse+0x66e>
					{
						right_degrees(88);
    14ac:	88 e5       	ldi	r24, 0x58	; 88
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	06 da       	rcall	.-3060   	; 0x8be <right_degrees>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
						N=1;
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    14ba:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
    14be:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
						E=0;
    14c2:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
						S=0;
    14c6:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    14ca:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
						W=0;
    14ce:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    14d2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
			}
			
		}

	}
	if((C=='B'||C=='C'||C=='D'||C=='E')&&(D=='6')){
    14d6:	c4 30       	cpi	r28, 0x04	; 4
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <traverse+0x674>
    14da:	6f c0       	rjmp	.+222    	; 0x15ba <traverse+0x752>
    14dc:	86 e3       	ldi	r24, 0x36	; 54
    14de:	e8 12       	cpse	r14, r24
    14e0:	6c c0       	rjmp	.+216    	; 0x15ba <traverse+0x752>
		/********************************EAST*****************************/
		if(N==1){
    14e2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
    14e6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	b1 f4       	brne	.+44     	; 0x151a <traverse+0x6b2>
			right_degrees(88);
    14ee:	88 e5       	ldi	r24, 0x58	; 88
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	e5 d9       	rcall	.-3126   	; 0x8be <right_degrees>
    14f4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
			N=0;
    14f8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
			E=1;
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
    1504:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
    1508:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
			S=0;
    150c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
    1510:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
			W=0;
    1514:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1518:	50 c0       	rjmp	.+160    	; 0x15ba <traverse+0x752>
    151a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
		}
		else{
			if(E==1){
    151e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	99 f4       	brne	.+38     	; 0x154c <traverse+0x6e4>
    1526:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
				
				N=0;
    152a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
				E=1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
    1536:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
				S=0;
    153a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    153e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
				W=0;
    1542:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    1546:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    154a:	37 c0       	rjmp	.+110    	; 0x15ba <traverse+0x752>
			}
			else{
				if (S==1)
    154c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    1550:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	b1 f4       	brne	.+44     	; 0x1584 <traverse+0x71c>
				{
					left_degrees(88);
    1558:	88 e5       	ldi	r24, 0x58	; 88
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a7 d9       	rcall	.-3250   	; 0x8ac <left_degrees>
    155e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
					N=0;
    1562:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
					E=1;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
    156e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
					S=0;
    1572:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    1576:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
					W=0;
    157a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    157e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    1582:	1b c0       	rjmp	.+54     	; 0x15ba <traverse+0x752>
				}
				else{
					if (W==1)
    1584:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    1588:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	a9 f4       	brne	.+42     	; 0x15ba <traverse+0x752>
					{
						right_degrees(181);
    1590:	85 eb       	ldi	r24, 0xB5	; 181
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	94 d9       	rcall	.-3288   	; 0x8be <right_degrees>
    1596:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <N+0x1>
						N=0;
    159a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <N>
    159e:	81 e0       	ldi	r24, 0x01	; 1
						E=1;
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <E+0x1>
    15a6:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <E>
    15aa:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
						S=0;
    15ae:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
						W=0;
    15b2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
			
		}
	}

	
	if(pick==0){
    15b6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    15ba:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <pick>
    15be:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <pick+0x1>
    15c2:	00 97       	sbiw	r24, 0x00	; 0
		
		if(C=='A'&&D=='1'){
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <traverse+0x760>
    15c6:	7e c1       	rjmp	.+764    	; 0x18c4 <traverse+0xa5c>
    15c8:	81 e4       	ldi	r24, 0x41	; 65
    15ca:	f8 12       	cpse	r15, r24
    15cc:	de c1       	rjmp	.+956    	; 0x198a <traverse+0xb22>
    15ce:	81 e3       	ldi	r24, 0x31	; 49
			/*****NORT WEST*****/
			
			if(N==1){
    15d0:	e8 12       	cpse	r14, r24
    15d2:	cb c1       	rjmp	.+918    	; 0x196a <traverse+0xb02>
    15d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
				left_degrees(88/2);
    15d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	71 f4       	brne	.+28     	; 0x15fc <traverse+0x794>
				extended_grab_and_hold();
    15e0:	8c e2       	ldi	r24, 0x2C	; 44
    15e2:	90 e0       	ldi	r25, 0x00	; 0
				right_degrees(88/2);
    15e4:	63 d9       	rcall	.-3386   	; 0x8ac <left_degrees>
    15e6:	21 da       	rcall	.-3006   	; 0xa2a <extended_grab_and_hold>
    15e8:	8c e2       	ldi	r24, 0x2C	; 44
    15ea:	90 e0       	ldi	r25, 0x00	; 0
				pick=1;
    15ec:	68 d9       	rcall	.-3376   	; 0x8be <right_degrees>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
			}
			else{
				if(E==1){
    15f6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    15fa:	55 c1       	rjmp	.+682    	; 0x18a6 <traverse+0xa3e>
    15fc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
					
					left_degrees(135);
    1600:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	71 f4       	brne	.+28     	; 0x1624 <traverse+0x7bc>
					extended_grab_and_hold();
    1608:	87 e8       	ldi	r24, 0x87	; 135
    160a:	90 e0       	ldi	r25, 0x00	; 0
					right_degrees(135);
    160c:	4f d9       	rcall	.-3426   	; 0x8ac <left_degrees>
    160e:	0d da       	rcall	.-3046   	; 0xa2a <extended_grab_and_hold>
    1610:	87 e8       	ldi	r24, 0x87	; 135
    1612:	90 e0       	ldi	r25, 0x00	; 0
					pick=1;
    1614:	54 d9       	rcall	.-3416   	; 0x8be <right_degrees>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    161e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
				}
				else{
					if (S==1)
    1622:	41 c1       	rjmp	.+642    	; 0x18a6 <traverse+0xa3e>
    1624:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    1628:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    162c:	01 97       	sbiw	r24, 0x01	; 1
					{
						right_degrees(135);
    162e:	f1 f4       	brne	.+60     	; 0x166c <traverse+0x804>
    1630:	87 e8       	ldi	r24, 0x87	; 135
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	44 d9       	rcall	.-3448   	; 0x8be <right_degrees>
						extended_grab_and_hold();
    1636:	f9 d9       	rcall	.-3086   	; 0xa2a <extended_grab_and_hold>
						right_degrees(45);
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	40 d9       	rcall	.-3456   	; 0x8be <right_degrees>
						N=1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    1646:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
						S=0;
    164a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    164e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
						E=0;
    1652:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
    1656:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
						W=0;
    165a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
    165e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
						pick=1;
    1662:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    1666:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    166a:	1d c1       	rjmp	.+570    	; 0x18a6 <traverse+0xa3e>
					}
					else{
						if (W==1)
    166c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    1670:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <traverse+0x812>
    1678:	16 c1       	rjmp	.+556    	; 0x18a6 <traverse+0xa3e>
						{
							right_degrees(45);
    167a:	8d e2       	ldi	r24, 0x2D	; 45
    167c:	90 e0       	ldi	r25, 0x00	; 0
							extended_grab_and_hold();
    167e:	1f d9       	rcall	.-3522   	; 0x8be <right_degrees>
							right_degrees(45);
    1680:	d4 d9       	rcall	.-3160   	; 0xa2a <extended_grab_and_hold>
    1682:	8d e2       	ldi	r24, 0x2D	; 45
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	1b d9       	rcall	.-3530   	; 0x8be <right_degrees>
							N=1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <N+0x1>
    1690:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <N>
							S=0;
    1694:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <S+0x1>
    1698:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <S>
							E=0;
    169c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <E+0x1>
							W=0;
    16a0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <E>
    16a4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <W+0x1>
							pick=1;
    16a8:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <W>
    16ac:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				
			}
		}
		if(C=='A'&&D=='6'){
			/****************NORTH EAST*******************/
			if(N==1){
    16b0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    16b4:	f8 c0       	rjmp	.+496    	; 0x18a6 <traverse+0xa3e>
    16b6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
    16ba:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
				right_degrees(45);
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	71 f4       	brne	.+28     	; 0x16de <traverse+0x876>
				extended_grab_and_hold();
    16c2:	8d e2       	ldi	r24, 0x2D	; 45
    16c4:	90 e0       	ldi	r25, 0x00	; 0
				left_degrees(45);
    16c6:	fb d8       	rcall	.-3594   	; 0x8be <right_degrees>
    16c8:	b0 d9       	rcall	.-3232   	; 0xa2a <extended_grab_and_hold>
    16ca:	8d e2       	ldi	r24, 0x2D	; 45
				pick=1;
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	ee d8       	rcall	.-3620   	; 0x8ac <left_degrees>
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    16d8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
			
			
			}
			else{
				if(E==1){
    16dc:	e4 c0       	rjmp	.+456    	; 0x18a6 <traverse+0xa3e>
    16de:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
    16e2:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
					left_degrees(45);
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	71 f4       	brne	.+28     	; 0x1706 <traverse+0x89e>
					extended_grab_and_hold();
    16ea:	8d e2       	ldi	r24, 0x2D	; 45
					right_degrees(45);		
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	de d8       	rcall	.-3652   	; 0x8ac <left_degrees>
    16f0:	9c d9       	rcall	.-3272   	; 0xa2a <extended_grab_and_hold>
    16f2:	8d e2       	ldi	r24, 0x2D	; 45
					pick=1;
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	e3 d8       	rcall	.-3642   	; 0x8be <right_degrees>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    1700:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
										
				}
				else{
					if (S==1)
    1704:	d0 c0       	rjmp	.+416    	; 0x18a6 <traverse+0xa3e>
    1706:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    170a:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
					{			
							left_degrees(135);
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	71 f4       	brne	.+28     	; 0x172e <traverse+0x8c6>
							extended_grab_and_hold();
    1712:	87 e8       	ldi	r24, 0x87	; 135
							right_degrees(135);		
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	ca d8       	rcall	.-3692   	; 0x8ac <left_degrees>
    1718:	88 d9       	rcall	.-3312   	; 0xa2a <extended_grab_and_hold>
    171a:	87 e8       	ldi	r24, 0x87	; 135
						
						pick=1;
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	cf d8       	rcall	.-3682   	; 0x8be <right_degrees>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    1728:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
					}
					else{
						if (W==1)
    172c:	bc c0       	rjmp	.+376    	; 0x18a6 <traverse+0xa3e>
    172e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    1732:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
						{
							right_degrees(135);
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	09 f0       	breq	.+2      	; 0x173c <traverse+0x8d4>
							extended_grab_and_hold();
    173a:	b5 c0       	rjmp	.+362    	; 0x18a6 <traverse+0xa3e>
    173c:	87 e8       	ldi	r24, 0x87	; 135
							left_degrees(135);
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	be d8       	rcall	.-3716   	; 0x8be <right_degrees>
    1742:	73 d9       	rcall	.-3354   	; 0xa2a <extended_grab_and_hold>
    1744:	87 e8       	ldi	r24, 0x87	; 135
						pick=1;
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	b1 d8       	rcall	.-3742   	; 0x8ac <left_degrees>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				
				
			}
		}

		if(C=='F'&&D=='6'){
    1752:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
			/*******************south east************************/
			if(N==1){
    1756:	a7 c0       	rjmp	.+334    	; 0x18a6 <traverse+0xa3e>
    1758:	86 e3       	ldi	r24, 0x36	; 54
    175a:	e8 12       	cpse	r14, r24
    175c:	51 c0       	rjmp	.+162    	; 0x1800 <traverse+0x998>
    175e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
				right_degrees(130);
    1762:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    1766:	01 97       	sbiw	r24, 0x01	; 1
				extended_grab_and_hold();
    1768:	71 f4       	brne	.+28     	; 0x1786 <traverse+0x91e>
    176a:	82 e8       	ldi	r24, 0x82	; 130
				left_degrees(133);
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a7 d8       	rcall	.-3762   	; 0x8be <right_degrees>
    1770:	5c d9       	rcall	.-3400   	; 0xa2a <extended_grab_and_hold>
    1772:	85 e8       	ldi	r24, 0x85	; 133
					pick=1;
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9a d8       	rcall	.-3788   	; 0x8ac <left_degrees>
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				
			}
			else{
				if(E==1){
    1780:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    1784:	07 c1       	rjmp	.+526    	; 0x1994 <traverse+0xb2c>
    1786:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
					right_degrees(45);
    178a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	71 f4       	brne	.+28     	; 0x17ae <traverse+0x946>
					extended_grab_and_hold();
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	90 e0       	ldi	r25, 0x00	; 0
					left_degrees(45);
    1796:	93 d8       	rcall	.-3802   	; 0x8be <right_degrees>
    1798:	48 d9       	rcall	.-3440   	; 0xa2a <extended_grab_and_hold>
    179a:	8d e2       	ldi	r24, 0x2D	; 45
    179c:	90 e0       	ldi	r25, 0x00	; 0
					pick=1;
    179e:	86 d8       	rcall	.-3828   	; 0x8ac <left_degrees>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				}
				else{
					if (S==1)
    17a8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    17ac:	f3 c0       	rjmp	.+486    	; 0x1994 <traverse+0xb2c>
    17ae:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
					{
						left_degrees(45);
    17b2:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	71 f4       	brne	.+28     	; 0x17d6 <traverse+0x96e>
						extended_grab_and_hold();
    17ba:	8d e2       	ldi	r24, 0x2D	; 45
    17bc:	90 e0       	ldi	r25, 0x00	; 0
						right_degrees(45);
    17be:	76 d8       	rcall	.-3860   	; 0x8ac <left_degrees>
    17c0:	34 d9       	rcall	.-3480   	; 0xa2a <extended_grab_and_hold>
    17c2:	8d e2       	ldi	r24, 0x2D	; 45
						pick=1;	
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	7b d8       	rcall	.-3850   	; 0x8be <right_degrees>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
					}
					else{
						if (W==1)
    17d0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    17d4:	df c0       	rjmp	.+446    	; 0x1994 <traverse+0xb2c>
    17d6:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    17da:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
						{
							left_degrees(135);
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <traverse+0x97c>
    17e2:	61 c0       	rjmp	.+194    	; 0x18a6 <traverse+0xa3e>
							extended_grab_and_hold();
    17e4:	87 e8       	ldi	r24, 0x87	; 135
							right_degrees(135);
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	61 d8       	rcall	.-3902   	; 0x8ac <left_degrees>
    17ea:	1f d9       	rcall	.-3522   	; 0xa2a <extended_grab_and_hold>
							pick=1;
    17ec:	87 e8       	ldi	r24, 0x87	; 135
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	66 d8       	rcall	.-3892   	; 0x8be <right_degrees>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				
				
				
			}
		}
		if(C=='F'&&D=='1'){
    17fa:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
			/*******South west*******/
			
			
			if(N==1){
    17fe:	ca c0       	rjmp	.+404    	; 0x1994 <traverse+0xb2c>
    1800:	81 e3       	ldi	r24, 0x31	; 49
    1802:	e8 12       	cpse	r14, r24
    1804:	50 c0       	rjmp	.+160    	; 0x18a6 <traverse+0xa3e>
    1806:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
				left_degrees(135);
    180a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
				extended_grab_and_hold();
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	71 f4       	brne	.+28     	; 0x182e <traverse+0x9c6>
				right_degrees(135);
    1812:	87 e8       	ldi	r24, 0x87	; 135
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	4a d8       	rcall	.-3948   	; 0x8ac <left_degrees>
    1818:	08 d9       	rcall	.-3568   	; 0xa2a <extended_grab_and_hold>
					pick=1;		
    181a:	87 e8       	ldi	r24, 0x87	; 135
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	4f d8       	rcall	.-3938   	; 0x8be <right_degrees>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
				
			}
			else{
				if(E==1){
    1828:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    182c:	b3 c0       	rjmp	.+358    	; 0x1994 <traverse+0xb2c>
    182e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
				right_degrees(135);
    1832:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    1836:	01 97       	sbiw	r24, 0x01	; 1
				extended_grab_and_hold();
    1838:	71 f4       	brne	.+28     	; 0x1856 <traverse+0x9ee>
    183a:	87 e8       	ldi	r24, 0x87	; 135
				left_degrees(135);	
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	3f d8       	rcall	.-3970   	; 0x8be <right_degrees>
    1840:	f4 d8       	rcall	.-3608   	; 0xa2a <extended_grab_and_hold>
    1842:	87 e8       	ldi	r24, 0x87	; 135
					pick=1;
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	32 d8       	rcall	.-3996   	; 0x8ac <left_degrees>
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    1850:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
					
				}
				else{
					if (S==1)
    1854:	9f c0       	rjmp	.+318    	; 0x1994 <traverse+0xb2c>
    1856:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    185a:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
					{
						right_degrees(45);
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	71 f4       	brne	.+28     	; 0x187e <traverse+0xa16>
    1862:	8d e2       	ldi	r24, 0x2D	; 45
    1864:	90 e0       	ldi	r25, 0x00	; 0
						extended_grab_and_hold();
    1866:	2b d8       	rcall	.-4010   	; 0x8be <right_degrees>
						left_degrees(45);
    1868:	e0 d8       	rcall	.-3648   	; 0xa2a <extended_grab_and_hold>
    186a:	8d e2       	ldi	r24, 0x2D	; 45
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	1e d8       	rcall	.-4036   	; 0x8ac <left_degrees>
						pick=1;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    1878:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    187c:	8b c0       	rjmp	.+278    	; 0x1994 <traverse+0xb2c>
						
					}
					else{
						if (W==1)
    187e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    1882:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	71 f4       	brne	.+28     	; 0x18a6 <traverse+0xa3e>
						{
							left_degrees(45);
    188a:	8d e2       	ldi	r24, 0x2D	; 45
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e d8       	rcall	.-4068   	; 0x8ac <left_degrees>
							extended_grab_and_hold();
    1890:	cc d8       	rcall	.-3688   	; 0xa2a <extended_grab_and_hold>
    1892:	8d e2       	ldi	r24, 0x2D	; 45
							right_degrees(45);
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	13 d8       	rcall	.-4058   	; 0x8be <right_degrees>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
							pick=1;
    189c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    18a0:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    18a4:	77 c0       	rjmp	.+238    	; 0x1994 <traverse+0xb2c>
    18a6:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <pick>
				
			}
		}
		
		
		if(pick==0){
    18aa:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <pick+0x1>
    18ae:	89 2b       	or	r24, r25
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <traverse+0xa4c>
    18b2:	70 c0       	rjmp	.+224    	; 0x1994 <traverse+0xb2c>
    18b4:	81 e0       	ldi	r24, 0x01	; 1
			pick=1;
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <pick+0x1>
    18bc:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <pick>
    18c0:	42 d8       	rcall	.-3964   	; 0x946 <normal_grab_and_hold>
			normal_grab_and_hold();
    18c2:	68 c0       	rjmp	.+208    	; 0x1994 <traverse+0xb2c>
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <traverse+0xa62>
		}
		
		
		}else if(pick==1){
    18c8:	65 c0       	rjmp	.+202    	; 0x1994 <traverse+0xb2c>
    18ca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <N>
		
		
		
		
		/*mouth to north and 45 north east*/
			if(N==1){
    18ce:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <N+0x1>
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	71 f4       	brne	.+28     	; 0x18f2 <traverse+0xa8a>
    18d6:	8d e2       	ldi	r24, 0x2D	; 45
    18d8:	90 e0       	ldi	r25, 0x00	; 0
				right_degrees(45);
    18da:	0e 94 5f 04 	call	0x8be	; 0x8be <right_degrees>
    18de:	47 d9       	rcall	.-3442   	; 0xb6e <deposit>
				deposit();
    18e0:	8d e2       	ldi	r24, 0x2D	; 45
    18e2:	90 e0       	ldi	r25, 0x00	; 0
				left_degrees(45);
    18e4:	0e 94 56 04 	call	0x8ac	; 0x8ac <left_degrees>
    18e8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <pick+0x1>
				pick=0;
    18ec:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <pick>
    18f0:	51 c0       	rjmp	.+162    	; 0x1994 <traverse+0xb2c>
    18f2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <E>
			}
			else{
				if(E==1){
    18f6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <E+0x1>
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	71 f4       	brne	.+28     	; 0x191a <traverse+0xab2>
    18fe:	8d e2       	ldi	r24, 0x2D	; 45
    1900:	90 e0       	ldi	r25, 0x00	; 0
					left_degrees(45);
    1902:	0e 94 56 04 	call	0x8ac	; 0x8ac <left_degrees>
    1906:	33 d9       	rcall	.-3482   	; 0xb6e <deposit>
    1908:	8d e2       	ldi	r24, 0x2D	; 45
					deposit();
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 5f 04 	call	0x8be	; 0x8be <right_degrees>
					right_degrees(45);
    1910:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <pick+0x1>
    1914:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <pick>
					pick=0;
    1918:	3d c0       	rjmp	.+122    	; 0x1994 <traverse+0xb2c>
    191a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <S>
    191e:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <S+0x1>
				}
				else{
					if (S==1)
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	71 f4       	brne	.+28     	; 0x1942 <traverse+0xada>
    1926:	87 e8       	ldi	r24, 0x87	; 135
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 56 04 	call	0x8ac	; 0x8ac <left_degrees>
					{
						left_degrees(135);
    192e:	1f d9       	rcall	.-3522   	; 0xb6e <deposit>
    1930:	87 e8       	ldi	r24, 0x87	; 135
    1932:	90 e0       	ldi	r25, 0x00	; 0
						deposit();
    1934:	0e 94 5f 04 	call	0x8be	; 0x8be <right_degrees>
						right_degrees(135);
    1938:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <pick+0x1>
    193c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <pick>
						pick=0;
    1940:	29 c0       	rjmp	.+82     	; 0x1994 <traverse+0xb2c>
    1942:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <W>
    1946:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <W+0x1>
					}
					else{
						if (W==1)
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	19 f5       	brne	.+70     	; 0x1994 <traverse+0xb2c>
    194e:	87 e8       	ldi	r24, 0x87	; 135
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 5f 04 	call	0x8be	; 0x8be <right_degrees>
						{
							right_degrees(135);
    1956:	0b d9       	rcall	.-3562   	; 0xb6e <deposit>
    1958:	87 e8       	ldi	r24, 0x87	; 135
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 56 04 	call	0x8ac	; 0x8ac <left_degrees>
							deposit();
    1960:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <pick+0x1>
							left_degrees(135);
    1964:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <pick>
    1968:	15 c0       	rjmp	.+42     	; 0x1994 <traverse+0xb2c>
							pick=0;
    196a:	86 e3       	ldi	r24, 0x36	; 54
    196c:	e8 12       	cpse	r14, r24
    196e:	9b cf       	rjmp	.-202    	; 0x18a6 <traverse+0xa3e>
    1970:	a2 ce       	rjmp	.-700    	; 0x16b6 <traverse+0x84e>
	
	}



}
    1972:	8e ec       	ldi	r24, 0xCE	; 206
				
				
				
			}
		}
		if(C=='A'&&D=='6'){
    1974:	8e 0d       	add	r24, r14
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	08 f4       	brcc	.+2      	; 0x197c <traverse+0xb14>
    197a:	d3 cc       	rjmp	.-1626   	; 0x1322 <traverse+0x4ba>
			}
			
		}

	}
	if((D=='2'||D=='3'||D=='4'||D=='5')&&(C=='F')){
    197c:	af cd       	rjmp	.-1186   	; 0x14dc <traverse+0x674>
    197e:	8e ec       	ldi	r24, 0xCE	; 206
    1980:	8e 0d       	add	r24, r14
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	08 f0       	brcs	.+2      	; 0x1988 <traverse+0xb20>
    1986:	19 ce       	rjmp	.-974    	; 0x15ba <traverse+0x752>
    1988:	cc cc       	rjmp	.-1640   	; 0x1322 <traverse+0x4ba>
    198a:	86 e4       	ldi	r24, 0x46	; 70
    198c:	f8 16       	cp	r15, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <traverse+0xb2a>
    1990:	e3 ce       	rjmp	.-570    	; 0x1758 <traverse+0x8f0>
    1992:	90 cf       	rjmp	.-224    	; 0x18b4 <traverse+0xa4c>
				
				
			}
		}

		if(C=='F'&&D=='6'){
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
	
	}



}
    199e:	ef 90       	pop	r14
    19a0:	08 95       	ret

000019a2 <parsestr>:
    19a2:	8f 92       	push	r8
    19a4:	9f 92       	push	r9
    19a6:	af 92       	push	r10
    19a8:	bf 92       	push	r11
    19aa:	cf 92       	push	r12



void parsestr(){
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	da 95       	dec	r29
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
	 char *k,*tok;
	char a,b,c,d;
	 char habitat[50]="";
    19ca:	1a 82       	std	Y+2, r1	; 0x02
    19cc:	19 82       	std	Y+1, r1	; 0x01
    19ce:	fe 01       	movw	r30, r28
    19d0:	33 96       	adiw	r30, 0x03	; 3
    19d2:	80 e3       	ldi	r24, 0x30	; 48
    19d4:	df 01       	movw	r26, r30
    19d6:	1d 92       	st	X+, r1
    19d8:	8a 95       	dec	r24
    19da:	e9 f7       	brne	.-6      	; 0x19d6 <parsestr+0x34>
	 char Final[100]="";
    19dc:	1c aa       	std	Y+52, r1	; 0x34
    19de:	1b aa       	std	Y+51, r1	; 0x33
    19e0:	f2 96       	adiw	r30, 0x32	; 50
    19e2:	82 e6       	ldi	r24, 0x62	; 98
    19e4:	df 01       	movw	r26, r30
    19e6:	1d 92       	st	X+, r1
    19e8:	8a 95       	dec	r24
    19ea:	e9 f7       	brne	.-6      	; 0x19e6 <parsestr+0x44>
	 const char FINAL[100]="A1";
    19ec:	81 e4       	ldi	r24, 0x41	; 65
    19ee:	91 e3       	ldi	r25, 0x31	; 49
    19f0:	c9 56       	subi	r28, 0x69	; 105
    19f2:	df 4f       	sbci	r29, 0xFF	; 255
    19f4:	99 83       	std	Y+1, r25	; 0x01
    19f6:	88 83       	st	Y, r24
    19f8:	c7 59       	subi	r28, 0x97	; 151
    19fa:	d0 40       	sbci	r29, 0x00	; 0
    19fc:	c7 56       	subi	r28, 0x67	; 103
    19fe:	df 4f       	sbci	r29, 0xFF	; 255
    1a00:	19 82       	std	Y+1, r1	; 0x01
    1a02:	18 82       	st	Y, r1
    1a04:	c9 59       	subi	r28, 0x99	; 153
    1a06:	d0 40       	sbci	r29, 0x00	; 0
    1a08:	e7 e9       	ldi	r30, 0x97	; 151
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	ec 0f       	add	r30, r28
    1a0e:	fd 1f       	adc	r31, r29
    1a10:	34 96       	adiw	r30, 0x04	; 4
    1a12:	80 e6       	ldi	r24, 0x60	; 96
    1a14:	df 01       	movw	r26, r30
    1a16:	1d 92       	st	X+, r1
    1a18:	8a 95       	dec	r24
    1a1a:	e9 f7       	brne	.-6      	; 0x1a16 <parsestr+0x74>
	 char pos[3],des[3];
	 int i=0,j=0;
	 int num;
	 
	 i=0;
	 while(input_str[i]!='\n'){
    1a1c:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <input_str>
    1a20:	8a 30       	cpi	r24, 0x0A	; 10
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <parsestr+0x9e>
    1a24:	de 01       	movw	r26, r28
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	e8 e2       	ldi	r30, 0x28	; 40
    1a2a:	f3 e0       	ldi	r31, 0x03	; 3
    1a2c:	e1 2c       	mov	r14, r1
    1a2e:	f1 2c       	mov	r15, r1

		 habitat[i]=input_str[i];
    1a30:	8d 93       	st	X+, r24
		 i++;
    1a32:	2f ef       	ldi	r18, 0xFF	; 255
    1a34:	e2 1a       	sub	r14, r18
    1a36:	f2 0a       	sbc	r15, r18
	 char pos[3],des[3];
	 int i=0,j=0;
	 int num;
	 
	 i=0;
	 while(input_str[i]!='\n'){
    1a38:	81 91       	ld	r24, Z+
    1a3a:	8a 30       	cpi	r24, 0x0A	; 10
    1a3c:	c9 f7       	brne	.-14     	; 0x1a30 <parsestr+0x8e>
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <parsestr+0xa2>
	 char decoded[2]="";
	 char pos[3],des[3];
	 int i=0,j=0;
	 int num;
	 
	 i=0;
    1a40:	e1 2c       	mov	r14, r1
    1a42:	f1 2c       	mov	r15, r1

		 habitat[i]=input_str[i];
		 i++;
	 }

	 tok=strtok(habitat,", ");
    1a44:	6d e4       	ldi	r22, 0x4D	; 77
    1a46:	72 e0       	ldi	r23, 0x02	; 2
    1a48:	ce 01       	movw	r24, r28
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	ee d2       	rcall	.+1500   	; 0x202a <strtok>
	 while (tok!= NULL)
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
	 {
		 //printf("%s ",tok);
		 strcat(habitat_node,decode(atoi(tok)));
    1a50:	69 f0       	breq	.+26     	; 0x1a6c <parsestr+0xca>
    1a52:	ba d2       	rcall	.+1396   	; 0x1fc8 <atoi>
    1a54:	af d9       	rcall	.-3234   	; 0xdb4 <decode>
    1a56:	bc 01       	movw	r22, r24
    1a58:	8c eb       	ldi	r24, 0xBC	; 188
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	e9 d2       	rcall	.+1490   	; 0x2030 <strcat>
		 tok = strtok (NULL, ", ");
    1a5e:	6d e4       	ldi	r22, 0x4D	; 77
    1a60:	72 e0       	ldi	r23, 0x02	; 2
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	e1 d2       	rcall	.+1474   	; 0x202a <strtok>
		 habitat[i]=input_str[i];
		 i++;
	 }

	 tok=strtok(habitat,", ");
	 while (tok!= NULL)
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	99 f7       	brne	.-26     	; 0x1a52 <parsestr+0xb0>
		 //printf("%s ",tok);
		 strcat(habitat_node,decode(atoi(tok)));
		 tok = strtok (NULL, ", ");
	 }
	 
	  while(input_str[i]!='#'){
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	e9 5d       	subi	r30, 0xD9	; 217
    1a70:	fc 4f       	sbci	r31, 0xFC	; 252
    1a72:	10 81       	ld	r17, Z
    1a74:	13 32       	cpi	r17, 0x23	; 35
    1a76:	f9 f0       	breq	.+62     	; 0x1ab6 <parsestr+0x114>
    1a78:	c7 01       	movw	r24, r14
    1a7a:	88 5d       	subi	r24, 0xD8	; 216
    1a7c:	9c 4f       	sbci	r25, 0xFC	; 252
    1a7e:	4c 01       	movw	r8, r24
    1a80:	a1 2c       	mov	r10, r1
		  //printf("%c",input_str[i]);
		  if(isalpha(input_str[i])||isalnum(input_str[i])){
    1a82:	b1 2c       	mov	r11, r1
    1a84:	c1 2e       	mov	r12, r17
    1a86:	d1 2c       	mov	r13, r1
    1a88:	c6 01       	movw	r24, r12
    1a8a:	c8 d2       	rcall	.+1424   	; 0x201c <isalpha>
    1a8c:	89 2b       	or	r24, r25
    1a8e:	21 f4       	brne	.+8      	; 0x1a98 <parsestr+0xf6>
    1a90:	c6 01       	movw	r24, r12
    1a92:	b7 d2       	rcall	.+1390   	; 0x2002 <isalnum>
    1a94:	89 2b       	or	r24, r25
    1a96:	39 f0       	breq	.+14     	; 0x1aa6 <parsestr+0x104>
			  animal[j]=input_str[i];
    1a98:	f5 01       	movw	r30, r10
    1a9a:	e8 5a       	subi	r30, 0xA8	; 168
    1a9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9e:	10 83       	st	Z, r17
			  j++;
    1aa0:	9f ef       	ldi	r25, 0xFF	; 255
    1aa2:	a9 1a       	sub	r10, r25
    1aa4:	b9 0a       	sbc	r11, r25
		  }
		  i++;
    1aa6:	af ef       	ldi	r26, 0xFF	; 255
    1aa8:	ea 1a       	sub	r14, r26
    1aaa:	fa 0a       	sbc	r15, r26
		 //printf("%s ",tok);
		 strcat(habitat_node,decode(atoi(tok)));
		 tok = strtok (NULL, ", ");
	 }
	 
	  while(input_str[i]!='#'){
    1aac:	f4 01       	movw	r30, r8
    1aae:	11 91       	ld	r17, Z+
    1ab0:	4f 01       	movw	r8, r30
    1ab2:	13 32       	cpi	r17, 0x23	; 35
    1ab4:	39 f7       	brne	.-50     	; 0x1a84 <parsestr+0xe2>
			  j++;
		  }
		  i++;

	  }
	  animal[i++]='\0';
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	e8 5a       	subi	r30, 0xA8	; 168
    1aba:	fd 4f       	sbci	r31, 0xFD	; 253
    1abc:	10 82       	st	Z, r1
    1abe:	28 e5       	ldi	r18, 0x58	; 88
    1ac0:	32 e0       	ldi	r19, 0x02	; 2
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	f3 96       	adiw	r30, 0x33	; 51
    1ac6:	8c eb       	ldi	r24, 0xBC	; 188
    1ac8:	92 e0       	ldi	r25, 0x02	; 2
	  i=0,j=0;
    1aca:	00 e0       	ldi	r16, 0x00	; 0
    1acc:	10 e0       	ldi	r17, 0x00	; 0
	  for(i=0;i<strlen(animal);i+=2){
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	50 e0       	ldi	r21, 0x00	; 0
    1ad2:	79 01       	movw	r14, r18
    1ad4:	18 c0       	rjmp	.+48     	; 0x1b06 <parsestr+0x164>

		  Final[j]=animal[i];
    1ad6:	d9 01       	movw	r26, r18
    1ad8:	7c 91       	ld	r23, X
    1ada:	70 83       	st	Z, r23
		  Final[j+1]=animal[i+1];
    1adc:	11 96       	adiw	r26, 0x01	; 1
    1ade:	6c 91       	ld	r22, X
    1ae0:	61 83       	std	Z+1, r22	; 0x01
		  Final[j+2]=animal[i];
    1ae2:	72 83       	std	Z+2, r23	; 0x02
		  Final[j+3]=animal[i+1];
    1ae4:	63 83       	std	Z+3, r22	; 0x03
		  Final[j+4]=habitat_node[i];
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	7c 91       	ld	r23, X
    1aea:	74 83       	std	Z+4, r23	; 0x04
		  Final[j+5]=habitat_node[i+1];
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	6c 91       	ld	r22, X
    1af0:	65 83       	std	Z+5, r22	; 0x05
		  Final[j+6]=habitat_node[i];
    1af2:	76 83       	std	Z+6, r23	; 0x06
		  Final[j+7]=habitat_node[i+1];
    1af4:	67 83       	std	Z+7, r22	; 0x07
		  j+=8;
    1af6:	08 5f       	subi	r16, 0xF8	; 248
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
		  i++;

	  }
	  animal[i++]='\0';
	  i=0,j=0;
	  for(i=0;i<strlen(animal);i+=2){
    1afa:	4e 5f       	subi	r20, 0xFE	; 254
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	2e 5f       	subi	r18, 0xFE	; 254
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	38 96       	adiw	r30, 0x08	; 8
    1b04:	02 96       	adiw	r24, 0x02	; 2
    1b06:	d7 01       	movw	r26, r14
    1b08:	0d 90       	ld	r0, X+
    1b0a:	00 20       	and	r0, r0
    1b0c:	e9 f7       	brne	.-6      	; 0x1b08 <parsestr+0x166>
    1b0e:	11 97       	sbiw	r26, 0x01	; 1
    1b10:	a8 55       	subi	r26, 0x58	; 88
    1b12:	b2 40       	sbci	r27, 0x02	; 2
    1b14:	4a 17       	cp	r20, r26
    1b16:	5b 07       	cpc	r21, r27
    1b18:	f0 f2       	brcs	.-68     	; 0x1ad6 <parsestr+0x134>
		  Final[j+5]=habitat_node[i+1];
		  Final[j+6]=habitat_node[i];
		  Final[j+7]=habitat_node[i+1];
		  j+=8;
	  }
	  Final[j-2]='\0';
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e0 0f       	add	r30, r16
    1b1e:	f1 1f       	adc	r31, r17

	  strcat(FINAL,Final);
    1b20:	11 aa       	std	Z+49, r1	; 0x31
    1b22:	be 01       	movw	r22, r28
    1b24:	6d 5c       	subi	r22, 0xCD	; 205
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	ce 01       	movw	r24, r28
    1b2a:	89 56       	subi	r24, 0x69	; 105
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	80 d2       	rcall	.+1280   	; 0x2030 <strcat>
	  cli();
    1b30:	f8 94       	cli
	 lcd_set_4bit();
    1b32:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_set_4bit>
	  lcd_init();
    1b36:	0e 94 20 01 	call	0x240	; 0x240 <lcd_init>
	  sei();
    1b3a:	78 94       	sei
	  lcd_string(FINAL);
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	89 56       	subi	r24, 0x69	; 105
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_string>
    1b46:	bf ef       	ldi	r27, 0xFF	; 255
    1b48:	ef ef       	ldi	r30, 0xFF	; 255
    1b4a:	fc e2       	ldi	r31, 0x2C	; 44
    1b4c:	b1 50       	subi	r27, 0x01	; 1
    1b4e:	e0 40       	sbci	r30, 0x00	; 0
    1b50:	f0 40       	sbci	r31, 0x00	; 0
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <parsestr+0x1aa>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <parsestr+0x1b4>
    1b56:	00 00       	nop
    1b58:	ce 01       	movw	r24, r28
    1b5a:	89 56       	subi	r24, 0x69	; 105
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	7c 01       	movw	r14, r24
	_delay_ms(1000);
		
	  for(i=0;i<strlen(FINAL);i+=4){
    1b60:	c1 2c       	mov	r12, r1
    1b62:	d1 2c       	mov	r13, r1
    1b64:	5c 01       	movw	r10, r24
    1b66:	54 c0       	rjmp	.+168    	; 0x1c10 <parsestr+0x26e>
		  pos[0]=FINAL[i];
    1b68:	d7 01       	movw	r26, r14
    1b6a:	1c 91       	ld	r17, X
    1b6c:	c5 50       	subi	r28, 0x05	; 5
    1b6e:	df 4f       	sbci	r29, 0xFF	; 255
    1b70:	18 83       	st	Y, r17
    1b72:	cb 5f       	subi	r28, 0xFB	; 251
    1b74:	d0 40       	sbci	r29, 0x00	; 0
		  pos[1]=FINAL[i+1];
    1b76:	11 96       	adiw	r26, 0x01	; 1
    1b78:	9c 90       	ld	r9, X
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	c4 50       	subi	r28, 0x04	; 4
    1b7e:	df 4f       	sbci	r29, 0xFF	; 255
    1b80:	98 82       	st	Y, r9
    1b82:	cc 5f       	subi	r28, 0xFC	; 252
    1b84:	d0 40       	sbci	r29, 0x00	; 0
	      pos[2]='\0';
    1b86:	c3 50       	subi	r28, 0x03	; 3
    1b88:	df 4f       	sbci	r29, 0xFF	; 255
    1b8a:	18 82       	st	Y, r1
    1b8c:	cd 5f       	subi	r28, 0xFD	; 253
    1b8e:	d0 40       	sbci	r29, 0x00	; 0
		  des[0]=FINAL[i+2];
    1b90:	12 96       	adiw	r26, 0x02	; 2
    1b92:	8c 90       	ld	r8, X
    1b94:	12 97       	sbiw	r26, 0x02	; 2
    1b96:	c2 50       	subi	r28, 0x02	; 2
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	88 82       	st	Y, r8
    1b9c:	ce 5f       	subi	r28, 0xFE	; 254
    1b9e:	d0 40       	sbci	r29, 0x00	; 0
		  des[1]=FINAL[i+3];
    1ba0:	13 96       	adiw	r26, 0x03	; 3
    1ba2:	0c 91       	ld	r16, X
    1ba4:	c1 50       	subi	r28, 0x01	; 1
    1ba6:	df 4f       	sbci	r29, 0xFF	; 255
    1ba8:	08 83       	st	Y, r16
    1baa:	cf 5f       	subi	r28, 0xFF	; 255
    1bac:	d0 40       	sbci	r29, 0x00	; 0
		  des[2]='\0';
    1bae:	c0 50       	subi	r28, 0x00	; 0
    1bb0:	df 4f       	sbci	r29, 0xFF	; 255
    1bb2:	18 82       	st	Y, r1
    1bb4:	c0 50       	subi	r28, 0x00	; 0
    1bb6:	d1 40       	sbci	r29, 0x01	; 1
		  a=pos[0];
		  b=pos[1];
		  
		  c=des[0];
		  d=des[1];
		  cli();
    1bb8:	f8 94       	cli
		  lcd_set_4bit();
    1bba:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_set_4bit>
		  lcd_init();
    1bbe:	0e 94 20 01 	call	0x240	; 0x240 <lcd_init>
		  sei();
    1bc2:	78 94       	sei
		  
		  	lcd_cursor(2,4);
    1bc4:	64 e0       	ldi	r22, 0x04	; 4
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_cursor>
		  	lcd_string(pos);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	85 50       	subi	r24, 0x05	; 5
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_string>
			  lcd_cursor(2,6);
    1bd6:	66 e0       	ldi	r22, 0x06	; 6
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_cursor>
		  	lcd_string(des);
    1bde:	ce 01       	movw	r24, r28
    1be0:	82 50       	subi	r24, 0x02	; 2
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_string>
    1be8:	bf ef       	ldi	r27, 0xFF	; 255
    1bea:	ef ef       	ldi	r30, 0xFF	; 255
    1bec:	fc e2       	ldi	r31, 0x2C	; 44
    1bee:	b1 50       	subi	r27, 0x01	; 1
    1bf0:	e0 40       	sbci	r30, 0x00	; 0
    1bf2:	f0 40       	sbci	r31, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <parsestr+0x24c>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <parsestr+0x256>
		  _delay_ms(1000);
		  traverse(a,b,c,d);
    1bf8:	00 00       	nop
    1bfa:	20 2f       	mov	r18, r16
    1bfc:	48 2d       	mov	r20, r8
    1bfe:	69 2d       	mov	r22, r9
    1c00:	81 2f       	mov	r24, r17
    1c02:	32 d9       	rcall	.-3484   	; 0xe68 <traverse>
	  lcd_init();
	  sei();
	  lcd_string(FINAL);
	_delay_ms(1000);
		
	  for(i=0;i<strlen(FINAL);i+=4){
    1c04:	24 e0       	ldi	r18, 0x04	; 4
    1c06:	c2 0e       	add	r12, r18
    1c08:	d1 1c       	adc	r13, r1
    1c0a:	84 e0       	ldi	r24, 0x04	; 4
    1c0c:	e8 0e       	add	r14, r24
    1c0e:	f1 1c       	adc	r15, r1
    1c10:	f5 01       	movw	r30, r10
    1c12:	01 90       	ld	r0, Z+
    1c14:	00 20       	and	r0, r0
    1c16:	e9 f7       	brne	.-6      	; 0x1c12 <parsestr+0x270>
    1c18:	31 97       	sbiw	r30, 0x01	; 1
    1c1a:	ea 19       	sub	r30, r10
    1c1c:	fb 09       	sbc	r31, r11
    1c1e:	ce 16       	cp	r12, r30
    1c20:	df 06       	cpc	r13, r31
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <parsestr+0x284>
    1c24:	a1 cf       	rjmp	.-190    	; 0x1b68 <parsestr+0x1c6>
		  	lcd_string(des);
		  _delay_ms(1000);
		  traverse(a,b,c,d);
		  
	  }
}
    1c26:	d3 95       	inc	r29
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	08 95       	ret

00001c4c <intrrupt>:


/********************************************************INTURREPT INT7******************************/
void intrrupt(){
	
	DDRE  = DDRE & 0x80;  //Set the direction of the PORTE 7 pin as input
    1c4c:	8d b1       	in	r24, 0x0d	; 13
    1c4e:	80 78       	andi	r24, 0x80	; 128
    1c50:	8d b9       	out	0x0d, r24	; 13
	PORTE = PORTE | 0x7F; //Enable internal pull-up for PORTE 7 pin
    1c52:	8e b1       	in	r24, 0x0e	; 14
    1c54:	8f 67       	ori	r24, 0x7F	; 127
    1c56:	8e b9       	out	0x0e, r24	; 14
    1c58:	08 95       	ret

00001c5a <init_boot_switch>:
	
}

void init_boot_switch(){
	cli();
    1c5a:	f8 94       	cli
	EICRB = EICRB | 0x00;//0x80; // INT7 is set to trigger between two rising age
    1c5c:	ea e6       	ldi	r30, 0x6A	; 106
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x80; // Enable Interrupt INT7 for boot switch 
    1c64:	ef 9a       	sbi	0x1d, 7	; 29
	EIFR=  EIFR | 0X80;
    1c66:	e7 9a       	sbi	0x1c, 7	; 28
	sei();
    1c68:	78 94       	sei
    1c6a:	08 95       	ret

00001c6c <__vector_8>:
	
}
ISR(INT7_vect){
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	0b b6       	in	r0, 0x3b	; 59
    1c78:	0f 92       	push	r0
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ef 93       	push	r30
    1c94:	ff 93       	push	r31
	
	straight_arm_free();
    1c96:	0e 94 71 04 	call	0x8e2	; 0x8e2 <straight_arm_free>
	DDRC=0x00;
	DDRC=DDRC |0x08;
	sei();
}
void buzzer_on(){
	PORTC= 0xff & 0x08;// dont mask(11111111 | 00001000)
    1c9a:	d8 e0       	ldi	r29, 0x08	; 8
    1c9c:	d8 b9       	out	0x08, r29	; 8
    1c9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	9c e2       	ldi	r25, 0x2C	; 44
    1ca4:	21 50       	subi	r18, 0x01	; 1
    1ca6:	80 40       	sbci	r24, 0x00	; 0
    1ca8:	90 40       	sbci	r25, 0x00	; 0
    1caa:	e1 f7       	brne	.-8      	; 0x1ca4 <__vector_8+0x38>
    1cac:	00 c0       	rjmp	.+0      	; 0x1cae <__vector_8+0x42>
    1cae:	00 00       	nop
}
void buzzer_off(){
	PORTC=0xff & 0xf7 ;//dont mask(11111111 & 11110111)
    1cb0:	c7 ef       	ldi	r28, 0xF7	; 247
    1cb2:	c8 b9       	out	0x08, r28	; 8
    1cb4:	2f ef       	ldi	r18, 0xFF	; 255
    1cb6:	8f e7       	ldi	r24, 0x7F	; 127
    1cb8:	94 e0       	ldi	r25, 0x04	; 4
    1cba:	21 50       	subi	r18, 0x01	; 1
    1cbc:	80 40       	sbci	r24, 0x00	; 0
    1cbe:	90 40       	sbci	r25, 0x00	; 0
    1cc0:	e1 f7       	brne	.-8      	; 0x1cba <__vector_8+0x4e>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <__vector_8+0x58>
    1cc4:	00 00       	nop
	
	buzzer_on();
	_delay_ms(1000);
	buzzer_off();
	_delay_ms(100);
	parsestr();
    1cc6:	6d de       	rcall	.-806    	; 0x19a2 <parsestr>
    1cc8:	2f ef       	ldi	r18, 0xFF	; 255
    1cca:	8f e7       	ldi	r24, 0x7F	; 127
    1ccc:	94 e0       	ldi	r25, 0x04	; 4
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	80 40       	sbci	r24, 0x00	; 0
    1cd2:	90 40       	sbci	r25, 0x00	; 0
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <__vector_8+0x62>
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <__vector_8+0x6c>
    1cd8:	00 00       	nop
	DDRC=0x00;
	DDRC=DDRC |0x08;
	sei();
}
void buzzer_on(){
	PORTC= 0xff & 0x08;// dont mask(11111111 | 00001000)
    1cda:	d8 b9       	out	0x08, r29	; 8
    1cdc:	2f ef       	ldi	r18, 0xFF	; 255
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	90 ee       	ldi	r25, 0xE0	; 224
    1ce2:	21 50       	subi	r18, 0x01	; 1
    1ce4:	80 40       	sbci	r24, 0x00	; 0
    1ce6:	90 40       	sbci	r25, 0x00	; 0
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <__vector_8+0x76>
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <__vector_8+0x80>
    1cec:	00 00       	nop
}
void buzzer_off(){
	PORTC=0xff & 0xf7 ;//dont mask(11111111 & 11110111)
    1cee:	c8 b9       	out	0x08, r28	; 8
    1cf0:	2f ef       	ldi	r18, 0xFF	; 255
    1cf2:	8f e7       	ldi	r24, 0x7F	; 127
    1cf4:	94 e0       	ldi	r25, 0x04	; 4
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	80 40       	sbci	r24, 0x00	; 0
    1cfa:	90 40       	sbci	r25, 0x00	; 0
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <__vector_8+0x8a>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <__vector_8+0x94>
    1d00:	00 00       	nop
	buzzer_on();
	_delay_ms(5000);
	buzzer_off();
	_delay_ms(100);
		
}
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0b be       	out	0x3b, r0	; 59
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <main>:


int main(void)
{	 
    /* Replace with your application code */
	cli();
    1d2c:	f8 94       	cli
	buzzer_pin_config();
    1d2e:	0e 94 ad 00 	call	0x15a	; 0x15a <buzzer_pin_config>
	ADC_init();
    1d32:	0e 94 41 03 	call	0x682	; 0x682 <ADC_init>
	intrrupt();
    1d36:	8a df       	rcall	.-236    	; 0x1c4c <intrrupt>
	init_boot_switch();
    1d38:	90 df       	rcall	.-224    	; 0x1c5a <init_boot_switch>
    1d3a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_port_init>
	lcd_port_init();
    1d3e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart2_init>
	uart2_init();
    1d42:	0e 94 28 03 	call	0x650	; 0x650 <init_servo>
	init_servo();
    1d46:	0e 94 68 04 	call	0x8d0	; 0x8d0 <init_motion>
	init_motion();
    1d4a:	78 94       	sei
	sei();
    1d4c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_set_4bit>
	lcd_set_4bit();
    1d50:	0e 94 20 01 	call	0x240	; 0x240 <lcd_init>
	lcd_init();
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <main+0x28>

00001d56 <__divsf3>:
    1d56:	0c d0       	rcall	.+24     	; 0x1d70 <__divsf3x>
    1d58:	e6 c0       	rjmp	.+460    	; 0x1f26 <__fp_round>
    1d5a:	de d0       	rcall	.+444    	; 0x1f18 <__fp_pscB>
    1d5c:	40 f0       	brcs	.+16     	; 0x1d6e <__divsf3+0x18>
    1d5e:	d5 d0       	rcall	.+426    	; 0x1f0a <__fp_pscA>
    1d60:	30 f0       	brcs	.+12     	; 0x1d6e <__divsf3+0x18>
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <__divsf3+0x16>
    1d64:	5f 3f       	cpi	r21, 0xFF	; 255
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <__divsf3+0x18>
    1d68:	c7 c0       	rjmp	.+398    	; 0x1ef8 <__fp_inf>
    1d6a:	51 11       	cpse	r21, r1
    1d6c:	10 c1       	rjmp	.+544    	; 0x1f8e <__fp_szero>
    1d6e:	ca c0       	rjmp	.+404    	; 0x1f04 <__fp_nan>

00001d70 <__divsf3x>:
    1d70:	eb d0       	rcall	.+470    	; 0x1f48 <__fp_split3>
    1d72:	98 f3       	brcs	.-26     	; 0x1d5a <__divsf3+0x4>

00001d74 <__divsf3_pse>:
    1d74:	99 23       	and	r25, r25
    1d76:	c9 f3       	breq	.-14     	; 0x1d6a <__divsf3+0x14>
    1d78:	55 23       	and	r21, r21
    1d7a:	b1 f3       	breq	.-20     	; 0x1d68 <__divsf3+0x12>
    1d7c:	95 1b       	sub	r25, r21
    1d7e:	55 0b       	sbc	r21, r21
    1d80:	bb 27       	eor	r27, r27
    1d82:	aa 27       	eor	r26, r26
    1d84:	62 17       	cp	r22, r18
    1d86:	73 07       	cpc	r23, r19
    1d88:	84 07       	cpc	r24, r20
    1d8a:	38 f0       	brcs	.+14     	; 0x1d9a <__divsf3_pse+0x26>
    1d8c:	9f 5f       	subi	r25, 0xFF	; 255
    1d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	44 1f       	adc	r20, r20
    1d96:	aa 1f       	adc	r26, r26
    1d98:	a9 f3       	breq	.-22     	; 0x1d84 <__divsf3_pse+0x10>
    1d9a:	33 d0       	rcall	.+102    	; 0x1e02 <__divsf3_pse+0x8e>
    1d9c:	0e 2e       	mov	r0, r30
    1d9e:	3a f0       	brmi	.+14     	; 0x1dae <__divsf3_pse+0x3a>
    1da0:	e0 e8       	ldi	r30, 0x80	; 128
    1da2:	30 d0       	rcall	.+96     	; 0x1e04 <__divsf3_pse+0x90>
    1da4:	91 50       	subi	r25, 0x01	; 1
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	e6 95       	lsr	r30
    1daa:	00 1c       	adc	r0, r0
    1dac:	ca f7       	brpl	.-14     	; 0x1da0 <__divsf3_pse+0x2c>
    1dae:	29 d0       	rcall	.+82     	; 0x1e02 <__divsf3_pse+0x8e>
    1db0:	fe 2f       	mov	r31, r30
    1db2:	27 d0       	rcall	.+78     	; 0x1e02 <__divsf3_pse+0x8e>
    1db4:	66 0f       	add	r22, r22
    1db6:	77 1f       	adc	r23, r23
    1db8:	88 1f       	adc	r24, r24
    1dba:	bb 1f       	adc	r27, r27
    1dbc:	26 17       	cp	r18, r22
    1dbe:	37 07       	cpc	r19, r23
    1dc0:	48 07       	cpc	r20, r24
    1dc2:	ab 07       	cpc	r26, r27
    1dc4:	b0 e8       	ldi	r27, 0x80	; 128
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <__divsf3_pse+0x56>
    1dc8:	bb 0b       	sbc	r27, r27
    1dca:	80 2d       	mov	r24, r0
    1dcc:	bf 01       	movw	r22, r30
    1dce:	ff 27       	eor	r31, r31
    1dd0:	93 58       	subi	r25, 0x83	; 131
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	2a f0       	brmi	.+10     	; 0x1de0 <__divsf3_pse+0x6c>
    1dd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1dd8:	51 05       	cpc	r21, r1
    1dda:	68 f0       	brcs	.+26     	; 0x1df6 <__divsf3_pse+0x82>
    1ddc:	8d c0       	rjmp	.+282    	; 0x1ef8 <__fp_inf>
    1dde:	d7 c0       	rjmp	.+430    	; 0x1f8e <__fp_szero>
    1de0:	5f 3f       	cpi	r21, 0xFF	; 255
    1de2:	ec f3       	brlt	.-6      	; 0x1dde <__divsf3_pse+0x6a>
    1de4:	98 3e       	cpi	r25, 0xE8	; 232
    1de6:	dc f3       	brlt	.-10     	; 0x1dde <__divsf3_pse+0x6a>
    1de8:	86 95       	lsr	r24
    1dea:	77 95       	ror	r23
    1dec:	67 95       	ror	r22
    1dee:	b7 95       	ror	r27
    1df0:	f7 95       	ror	r31
    1df2:	9f 5f       	subi	r25, 0xFF	; 255
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__divsf3_pse+0x74>
    1df6:	88 0f       	add	r24, r24
    1df8:	91 1d       	adc	r25, r1
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	97 f9       	bld	r25, 7
    1e00:	08 95       	ret
    1e02:	e1 e0       	ldi	r30, 0x01	; 1
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	88 1f       	adc	r24, r24
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	62 17       	cp	r22, r18
    1e0e:	73 07       	cpc	r23, r19
    1e10:	84 07       	cpc	r24, r20
    1e12:	ba 07       	cpc	r27, r26
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <__divsf3_pse+0xaa>
    1e16:	62 1b       	sub	r22, r18
    1e18:	73 0b       	sbc	r23, r19
    1e1a:	84 0b       	sbc	r24, r20
    1e1c:	ba 0b       	sbc	r27, r26
    1e1e:	ee 1f       	adc	r30, r30
    1e20:	88 f7       	brcc	.-30     	; 0x1e04 <__divsf3_pse+0x90>
    1e22:	e0 95       	com	r30
    1e24:	08 95       	ret

00001e26 <__fixunssfsi>:
    1e26:	98 d0       	rcall	.+304    	; 0x1f58 <__fp_splitA>
    1e28:	88 f0       	brcs	.+34     	; 0x1e4c <__fixunssfsi+0x26>
    1e2a:	9f 57       	subi	r25, 0x7F	; 127
    1e2c:	90 f0       	brcs	.+36     	; 0x1e52 <__fixunssfsi+0x2c>
    1e2e:	b9 2f       	mov	r27, r25
    1e30:	99 27       	eor	r25, r25
    1e32:	b7 51       	subi	r27, 0x17	; 23
    1e34:	a0 f0       	brcs	.+40     	; 0x1e5e <__fixunssfsi+0x38>
    1e36:	d1 f0       	breq	.+52     	; 0x1e6c <__fixunssfsi+0x46>
    1e38:	66 0f       	add	r22, r22
    1e3a:	77 1f       	adc	r23, r23
    1e3c:	88 1f       	adc	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	1a f0       	brmi	.+6      	; 0x1e48 <__fixunssfsi+0x22>
    1e42:	ba 95       	dec	r27
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__fixunssfsi+0x12>
    1e46:	12 c0       	rjmp	.+36     	; 0x1e6c <__fixunssfsi+0x46>
    1e48:	b1 30       	cpi	r27, 0x01	; 1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <__fixunssfsi+0x46>
    1e4c:	9f d0       	rcall	.+318    	; 0x1f8c <__fp_zero>
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	08 95       	ret
    1e52:	9c c0       	rjmp	.+312    	; 0x1f8c <__fp_zero>
    1e54:	67 2f       	mov	r22, r23
    1e56:	78 2f       	mov	r23, r24
    1e58:	88 27       	eor	r24, r24
    1e5a:	b8 5f       	subi	r27, 0xF8	; 248
    1e5c:	39 f0       	breq	.+14     	; 0x1e6c <__fixunssfsi+0x46>
    1e5e:	b9 3f       	cpi	r27, 0xF9	; 249
    1e60:	cc f3       	brlt	.-14     	; 0x1e54 <__fixunssfsi+0x2e>
    1e62:	86 95       	lsr	r24
    1e64:	77 95       	ror	r23
    1e66:	67 95       	ror	r22
    1e68:	b3 95       	inc	r27
    1e6a:	d9 f7       	brne	.-10     	; 0x1e62 <__fixunssfsi+0x3c>
    1e6c:	3e f4       	brtc	.+14     	; 0x1e7c <__fixunssfsi+0x56>
    1e6e:	90 95       	com	r25
    1e70:	80 95       	com	r24
    1e72:	70 95       	com	r23
    1e74:	61 95       	neg	r22
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7c:	08 95       	ret

00001e7e <__floatunsisf>:
    1e7e:	e8 94       	clt
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <__floatsisf+0x12>

00001e82 <__floatsisf>:
    1e82:	97 fb       	bst	r25, 7
    1e84:	3e f4       	brtc	.+14     	; 0x1e94 <__floatsisf+0x12>
    1e86:	90 95       	com	r25
    1e88:	80 95       	com	r24
    1e8a:	70 95       	com	r23
    1e8c:	61 95       	neg	r22
    1e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e90:	8f 4f       	sbci	r24, 0xFF	; 255
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	99 23       	and	r25, r25
    1e96:	a9 f0       	breq	.+42     	; 0x1ec2 <__floatsisf+0x40>
    1e98:	f9 2f       	mov	r31, r25
    1e9a:	96 e9       	ldi	r25, 0x96	; 150
    1e9c:	bb 27       	eor	r27, r27
    1e9e:	93 95       	inc	r25
    1ea0:	f6 95       	lsr	r31
    1ea2:	87 95       	ror	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f1 11       	cpse	r31, r1
    1eac:	f8 cf       	rjmp	.-16     	; 0x1e9e <__floatsisf+0x1c>
    1eae:	fa f4       	brpl	.+62     	; 0x1eee <__floatsisf+0x6c>
    1eb0:	bb 0f       	add	r27, r27
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <__floatsisf+0x36>
    1eb4:	60 ff       	sbrs	r22, 0
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <__floatsisf+0x6c>
    1eb8:	6f 5f       	subi	r22, 0xFF	; 255
    1eba:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	16 c0       	rjmp	.+44     	; 0x1eee <__floatsisf+0x6c>
    1ec2:	88 23       	and	r24, r24
    1ec4:	11 f0       	breq	.+4      	; 0x1eca <__floatsisf+0x48>
    1ec6:	96 e9       	ldi	r25, 0x96	; 150
    1ec8:	11 c0       	rjmp	.+34     	; 0x1eec <__floatsisf+0x6a>
    1eca:	77 23       	and	r23, r23
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <__floatsisf+0x54>
    1ece:	9e e8       	ldi	r25, 0x8E	; 142
    1ed0:	87 2f       	mov	r24, r23
    1ed2:	76 2f       	mov	r23, r22
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <__floatsisf+0x5e>
    1ed6:	66 23       	and	r22, r22
    1ed8:	71 f0       	breq	.+28     	; 0x1ef6 <__floatsisf+0x74>
    1eda:	96 e8       	ldi	r25, 0x86	; 134
    1edc:	86 2f       	mov	r24, r22
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	2a f0       	brmi	.+10     	; 0x1eee <__floatsisf+0x6c>
    1ee4:	9a 95       	dec	r25
    1ee6:	66 0f       	add	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	da f7       	brpl	.-10     	; 0x1ee4 <__floatsisf+0x62>
    1eee:	88 0f       	add	r24, r24
    1ef0:	96 95       	lsr	r25
    1ef2:	87 95       	ror	r24
    1ef4:	97 f9       	bld	r25, 7
    1ef6:	08 95       	ret

00001ef8 <__fp_inf>:
    1ef8:	97 f9       	bld	r25, 7
    1efa:	9f 67       	ori	r25, 0x7F	; 127
    1efc:	80 e8       	ldi	r24, 0x80	; 128
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	08 95       	ret

00001f04 <__fp_nan>:
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
    1f06:	80 ec       	ldi	r24, 0xC0	; 192
    1f08:	08 95       	ret

00001f0a <__fp_pscA>:
    1f0a:	00 24       	eor	r0, r0
    1f0c:	0a 94       	dec	r0
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	18 06       	cpc	r1, r24
    1f14:	09 06       	cpc	r0, r25
    1f16:	08 95       	ret

00001f18 <__fp_pscB>:
    1f18:	00 24       	eor	r0, r0
    1f1a:	0a 94       	dec	r0
    1f1c:	12 16       	cp	r1, r18
    1f1e:	13 06       	cpc	r1, r19
    1f20:	14 06       	cpc	r1, r20
    1f22:	05 06       	cpc	r0, r21
    1f24:	08 95       	ret

00001f26 <__fp_round>:
    1f26:	09 2e       	mov	r0, r25
    1f28:	03 94       	inc	r0
    1f2a:	00 0c       	add	r0, r0
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <__fp_round+0xc>
    1f2e:	88 23       	and	r24, r24
    1f30:	52 f0       	brmi	.+20     	; 0x1f46 <__fp_round+0x20>
    1f32:	bb 0f       	add	r27, r27
    1f34:	40 f4       	brcc	.+16     	; 0x1f46 <__fp_round+0x20>
    1f36:	bf 2b       	or	r27, r31
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <__fp_round+0x18>
    1f3a:	60 ff       	sbrs	r22, 0
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <__fp_round+0x20>
    1f3e:	6f 5f       	subi	r22, 0xFF	; 255
    1f40:	7f 4f       	sbci	r23, 0xFF	; 255
    1f42:	8f 4f       	sbci	r24, 0xFF	; 255
    1f44:	9f 4f       	sbci	r25, 0xFF	; 255
    1f46:	08 95       	ret

00001f48 <__fp_split3>:
    1f48:	57 fd       	sbrc	r21, 7
    1f4a:	90 58       	subi	r25, 0x80	; 128
    1f4c:	44 0f       	add	r20, r20
    1f4e:	55 1f       	adc	r21, r21
    1f50:	59 f0       	breq	.+22     	; 0x1f68 <__fp_splitA+0x10>
    1f52:	5f 3f       	cpi	r21, 0xFF	; 255
    1f54:	71 f0       	breq	.+28     	; 0x1f72 <__fp_splitA+0x1a>
    1f56:	47 95       	ror	r20

00001f58 <__fp_splitA>:
    1f58:	88 0f       	add	r24, r24
    1f5a:	97 fb       	bst	r25, 7
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <__fp_splitA+0x20>
    1f60:	9f 3f       	cpi	r25, 0xFF	; 255
    1f62:	79 f0       	breq	.+30     	; 0x1f82 <__fp_splitA+0x2a>
    1f64:	87 95       	ror	r24
    1f66:	08 95       	ret
    1f68:	12 16       	cp	r1, r18
    1f6a:	13 06       	cpc	r1, r19
    1f6c:	14 06       	cpc	r1, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	f2 cf       	rjmp	.-28     	; 0x1f56 <__fp_split3+0xe>
    1f72:	46 95       	lsr	r20
    1f74:	f1 df       	rcall	.-30     	; 0x1f58 <__fp_splitA>
    1f76:	08 c0       	rjmp	.+16     	; 0x1f88 <__fp_splitA+0x30>
    1f78:	16 16       	cp	r1, r22
    1f7a:	17 06       	cpc	r1, r23
    1f7c:	18 06       	cpc	r1, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	f1 cf       	rjmp	.-30     	; 0x1f64 <__fp_splitA+0xc>
    1f82:	86 95       	lsr	r24
    1f84:	71 05       	cpc	r23, r1
    1f86:	61 05       	cpc	r22, r1
    1f88:	08 94       	sec
    1f8a:	08 95       	ret

00001f8c <__fp_zero>:
    1f8c:	e8 94       	clt

00001f8e <__fp_szero>:
    1f8e:	bb 27       	eor	r27, r27
    1f90:	66 27       	eor	r22, r22
    1f92:	77 27       	eor	r23, r23
    1f94:	cb 01       	movw	r24, r22
    1f96:	97 f9       	bld	r25, 7
    1f98:	08 95       	ret

00001f9a <__tablejump2__>:
    1f9a:	ee 0f       	add	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	88 1f       	adc	r24, r24
    1fa0:	8b bf       	out	0x3b, r24	; 59
    1fa2:	07 90       	elpm	r0, Z+
    1fa4:	f6 91       	elpm	r31, Z
    1fa6:	e0 2d       	mov	r30, r0
    1fa8:	19 94       	eijmp

00001faa <__umulhisi3>:
    1faa:	a2 9f       	mul	r26, r18
    1fac:	b0 01       	movw	r22, r0
    1fae:	b3 9f       	mul	r27, r19
    1fb0:	c0 01       	movw	r24, r0
    1fb2:	a3 9f       	mul	r26, r19
    1fb4:	70 0d       	add	r23, r0
    1fb6:	81 1d       	adc	r24, r1
    1fb8:	11 24       	eor	r1, r1
    1fba:	91 1d       	adc	r25, r1
    1fbc:	b2 9f       	mul	r27, r18
    1fbe:	70 0d       	add	r23, r0
    1fc0:	81 1d       	adc	r24, r1
    1fc2:	11 24       	eor	r1, r1
    1fc4:	91 1d       	adc	r25, r1
    1fc6:	08 95       	ret

00001fc8 <atoi>:
    1fc8:	fc 01       	movw	r30, r24
    1fca:	88 27       	eor	r24, r24
    1fcc:	99 27       	eor	r25, r25
    1fce:	e8 94       	clt
    1fd0:	21 91       	ld	r18, Z+
    1fd2:	20 32       	cpi	r18, 0x20	; 32
    1fd4:	e9 f3       	breq	.-6      	; 0x1fd0 <atoi+0x8>
    1fd6:	29 30       	cpi	r18, 0x09	; 9
    1fd8:	10 f0       	brcs	.+4      	; 0x1fde <atoi+0x16>
    1fda:	2e 30       	cpi	r18, 0x0E	; 14
    1fdc:	c8 f3       	brcs	.-14     	; 0x1fd0 <atoi+0x8>
    1fde:	2b 32       	cpi	r18, 0x2B	; 43
    1fe0:	39 f0       	breq	.+14     	; 0x1ff0 <atoi+0x28>
    1fe2:	2d 32       	cpi	r18, 0x2D	; 45
    1fe4:	31 f4       	brne	.+12     	; 0x1ff2 <atoi+0x2a>
    1fe6:	68 94       	set
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <atoi+0x28>
    1fea:	54 d0       	rcall	.+168    	; 0x2094 <__mulhi_const_10>
    1fec:	82 0f       	add	r24, r18
    1fee:	91 1d       	adc	r25, r1
    1ff0:	21 91       	ld	r18, Z+
    1ff2:	20 53       	subi	r18, 0x30	; 48
    1ff4:	2a 30       	cpi	r18, 0x0A	; 10
    1ff6:	c8 f3       	brcs	.-14     	; 0x1fea <atoi+0x22>
    1ff8:	1e f4       	brtc	.+6      	; 0x2000 <atoi+0x38>
    1ffa:	90 95       	com	r25
    1ffc:	81 95       	neg	r24
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	08 95       	ret

00002002 <isalnum>:
    2002:	91 11       	cpse	r25, r1
    2004:	06 c0       	rjmp	.+12     	; 0x2012 <__ctype_isfalse>
    2006:	80 53       	subi	r24, 0x30	; 48
    2008:	8a 50       	subi	r24, 0x0A	; 10
    200a:	10 f0       	brcs	.+4      	; 0x2010 <isalnum+0xe>
    200c:	86 5c       	subi	r24, 0xC6	; 198
    200e:	06 c0       	rjmp	.+12     	; 0x201c <isalpha>
    2010:	08 95       	ret

00002012 <__ctype_isfalse>:
    2012:	99 27       	eor	r25, r25
    2014:	88 27       	eor	r24, r24

00002016 <__ctype_istrue>:
    2016:	08 95       	ret

00002018 <isupper>:
    2018:	85 fd       	sbrc	r24, 5
    201a:	fb cf       	rjmp	.-10     	; 0x2012 <__ctype_isfalse>

0000201c <isalpha>:
    201c:	80 62       	ori	r24, 0x20	; 32

0000201e <islower>:
    201e:	91 11       	cpse	r25, r1
    2020:	f8 cf       	rjmp	.-16     	; 0x2012 <__ctype_isfalse>
    2022:	81 56       	subi	r24, 0x61	; 97
    2024:	8a 51       	subi	r24, 0x1A	; 26
    2026:	e0 f7       	brcc	.-8      	; 0x2020 <islower+0x2>
    2028:	08 95       	ret

0000202a <strtok>:
    202a:	40 e5       	ldi	r20, 0x50	; 80
    202c:	52 e0       	ldi	r21, 0x02	; 2
    202e:	0b c0       	rjmp	.+22     	; 0x2046 <strtok_r>

00002030 <strcat>:
    2030:	fb 01       	movw	r30, r22
    2032:	dc 01       	movw	r26, r24
    2034:	0d 90       	ld	r0, X+
    2036:	00 20       	and	r0, r0
    2038:	e9 f7       	brne	.-6      	; 0x2034 <strcat+0x4>
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	01 90       	ld	r0, Z+
    203e:	0d 92       	st	X+, r0
    2040:	00 20       	and	r0, r0
    2042:	e1 f7       	brne	.-8      	; 0x203c <strcat+0xc>
    2044:	08 95       	ret

00002046 <strtok_r>:
    2046:	fa 01       	movw	r30, r20
    2048:	a1 91       	ld	r26, Z+
    204a:	b0 81       	ld	r27, Z
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	19 f4       	brne	.+6      	; 0x2056 <strtok_r+0x10>
    2050:	10 97       	sbiw	r26, 0x00	; 0
    2052:	e1 f0       	breq	.+56     	; 0x208c <strtok_r+0x46>
    2054:	cd 01       	movw	r24, r26
    2056:	dc 01       	movw	r26, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0d 90       	ld	r0, X+
    205c:	00 20       	and	r0, r0
    205e:	11 f4       	brne	.+4      	; 0x2064 <strtok_r+0x1e>
    2060:	c0 01       	movw	r24, r0
    2062:	13 c0       	rjmp	.+38     	; 0x208a <strtok_r+0x44>
    2064:	fb 01       	movw	r30, r22
    2066:	21 91       	ld	r18, Z+
    2068:	22 23       	and	r18, r18
    206a:	19 f0       	breq	.+6      	; 0x2072 <strtok_r+0x2c>
    206c:	20 15       	cp	r18, r0
    206e:	d9 f7       	brne	.-10     	; 0x2066 <strtok_r+0x20>
    2070:	f3 cf       	rjmp	.-26     	; 0x2058 <strtok_r+0x12>
    2072:	fb 01       	movw	r30, r22
    2074:	21 91       	ld	r18, Z+
    2076:	20 15       	cp	r18, r0
    2078:	19 f4       	brne	.+6      	; 0x2080 <strtok_r+0x3a>
    207a:	1e 92       	st	-X, r1
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	06 c0       	rjmp	.+12     	; 0x208c <strtok_r+0x46>
    2080:	22 23       	and	r18, r18
    2082:	c1 f7       	brne	.-16     	; 0x2074 <strtok_r+0x2e>
    2084:	0d 90       	ld	r0, X+
    2086:	00 20       	and	r0, r0
    2088:	a1 f7       	brne	.-24     	; 0x2072 <strtok_r+0x2c>
    208a:	d0 01       	movw	r26, r0
    208c:	fa 01       	movw	r30, r20
    208e:	a1 93       	st	Z+, r26
    2090:	b0 83       	st	Z, r27
    2092:	08 95       	ret

00002094 <__mulhi_const_10>:
    2094:	7a e0       	ldi	r23, 0x0A	; 10
    2096:	97 9f       	mul	r25, r23
    2098:	90 2d       	mov	r25, r0
    209a:	87 9f       	mul	r24, r23
    209c:	80 2d       	mov	r24, r0
    209e:	91 0d       	add	r25, r1
    20a0:	11 24       	eor	r1, r1
    20a2:	08 95       	ret

000020a4 <_exit>:
    20a4:	f8 94       	cli

000020a6 <__stop_program>:
    20a6:	ff cf       	rjmp	.-2      	; 0x20a6 <__stop_program>
